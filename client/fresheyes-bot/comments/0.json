[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480372",
    "pull_request_review_id": 1823506588,
    "id": 1453480372,
    "node_id": "PRRC_kwDOABII585Wolm0",
    "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    /** Add fee and size of another FeeFrac to this one. */\r\n    void inline operator+=(const FeeFrac& other) noexcept\r\n    {\r\n        fee += other.fee;\r\n        size += other.size;\r\n    }\r\n\r\n    /** Subtrack fee and size of another FeeFrac from this one. */\r\n```",
    "created_at": "2024-01-16T14:09:34Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453480372",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480372"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453480372"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480372/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 84,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 91,
    "side": "RIGHT",
    "original_position": 91,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480679",
    "pull_request_review_id": 1823506588,
    "id": 1453480679,
    "node_id": "PRRC_kwDOABII585Wolrn",
    "diff_hunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();",
    "path": "src/util/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Reserve here?\r\n```suggestion\r\n    diagram.clear();\r\n    diagram.reserve(chunks.size() + 1);\r\n```",
    "created_at": "2024-01-16T14:09:41Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453480679",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480679"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453480679"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480679/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT",
    "original_position": 9,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453482107",
    "pull_request_review_id": 1823506588,
    "id": 1453482107,
    "node_id": "PRRC_kwDOABII585WomB7",
    "diff_hunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();\n+    // Finish by sorting the chunks we calculated, and then accumulating them.\n+    std::sort(chunks.begin(), chunks.end(), [](const FeeFrac& a, const FeeFrac& b) { return a > b; });\n+\n+    // And now build the diagram for these chunks.\n+    diagram.emplace_back(0, 0);\n+    for (auto& chunk : chunks) {\n+        FeeFrac& last = diagram.back();\n+        diagram.emplace_back(last.fee+chunk.fee, last.size+chunk.size);\n+    }\n+    return;\n+}",
    "path": "src/util/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No need for this return here\r\n```suggestion\r\n}\r\n```",
    "created_at": "2024-01-16T14:10:20Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453482107",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453482107"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453482107"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453482107/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 19,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "original_position": 20,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453487633",
    "pull_request_review_id": 1823506588,
    "id": 1453487633,
    "node_id": "PRRC_kwDOABII585WonYR",
    "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    friend inline std::strong_ordering FeeRateCompare(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        if (a.fee > INT32_MAX || a.fee < INT32_MIN || b.fee > INT32_MAX || b.fee < INT32_MIN) {\n+            auto a_cross = Mul128(a.fee, b.size);\n+            auto b_cross = Mul128(b.fee, a.size);\n+            return a_cross <=> b_cross;\n+        } else {\n+            auto a_cross = a.fee * b.size;\n+            auto b_cross = b.fee * a.size;\n+            return a_cross <=> b_cross;\n+        }\n+    }\n+\n+    friend inline std::strong_ordering operator<=>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto feerate_cmp = FeeRateCompare(a, b);\n+        if (feerate_cmp != 0) return feerate_cmp; // NOLINT(modernize-use-nullptr)\n+        return b.size <=> a.size;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly lower feerate than another. */\n+    friend inline bool operator<<(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return FeeRateCompare(a, b) < 0; // NOLINT(modernize-use-nullptr)\n+    }\n+\n+    /** Check if a FeeFrac object has strictly higher feerate than another. */\n+    friend inline bool operator>>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return FeeRateCompare(a, b) > 0; // NOLINT(modernize-use-nullptr)\n+    }\n+\n+    friend inline void swap(FeeFrac& a, FeeFrac& b) noexcept\n+    {\n+        std::swap(a.fee, b.fee);\n+        std::swap(a.size, b.size);\n+    }\n+};\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram);",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe add a docstring on what `BuildDiagramFromUnsortedChunks` does in and out params description that are doxygen compatible?",
    "created_at": "2024-01-16T14:14:22Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453487633",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453487633"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453487633"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453487633/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 150,
    "side": "RIGHT",
    "original_position": 156,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453501485",
    "pull_request_review_id": 1823506588,
    "id": 1453501485,
    "node_id": "PRRC_kwDOABII585Woqwt",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};\n+    FeeFrac empty{0, 0};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: we can just use the empty constructor\r\n```suggestion\r\n    FeeFrac empty{};\r\n```",
    "created_at": "2024-01-16T14:24:35Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453501485",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453501485"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453501485"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453501485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 17,
    "original_line": 17,
    "side": "RIGHT",
    "original_position": 17,
    "position": 17,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453502118",
    "pull_request_review_id": 1823506588,
    "id": 1453502118,
    "node_id": "PRRC_kwDOABII585Woq6m",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why can we have negative size ?",
    "created_at": "2024-01-16T14:25:01Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453502118",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453502118"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453502118"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453502118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT",
    "original_position": 16,
    "position": 16,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453604924",
    "pull_request_review_id": 1823506588,
    "id": 1453604924,
    "node_id": "PRRC_kwDOABII585WpEA8",
    "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think you mean `all_conflicts` here\r\n```suggestion\r\n    // old diagram will consist of each element of all_conflicts either at\r\n```",
    "created_at": "2024-01-16T15:36:53Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453604924",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453604924"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453604924"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453604924/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1305,
    "side": "RIGHT",
    "original_position": 65,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453612523",
    "pull_request_review_id": 1823506588,
    "id": 1453612523,
    "node_id": "PRRC_kwDOABII585WpF3r",
    "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "use static cast?\r\n```suggestion\r\n            FeeFrac package{txiter->GetModFeesWithAncestors(), static_cast<int32_t>(txiter->GetSizeWithAncestors())};\r\n```",
    "created_at": "2024-01-16T15:42:19Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453612523",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453612523"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453612523"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453612523/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1327,
    "side": "RIGHT",
    "original_position": 87,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453626393",
    "pull_request_review_id": 1823506588,
    "id": 1453626393,
    "node_id": "PRRC_kwDOABII585WpJQZ",
    "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);\n+                old_chunks.emplace_back(individual);\n+            }\n+        } else {\n+            old_chunks.emplace_back(individual);\n+        }\n+    }\n+\n+    // No topology restrictions post-chunking; sort\n+    BuildDiagramFromUnsortedChunks(old_chunks, old_diagram);\n+\n+    std::vector<FeeFrac> new_chunks;\n+\n+    // Step 2: build the NEW = OLD - CON + CNK diagram\n+\n+    // OLD - CON: Any parents of direct conflicts that are not conflicted themselves\n+    for (auto direct_conflict : direct_conflicts) {\n+        // If a direct conflict has an ancestor that is not in all_conflicts,\n+        // it can be affected by the replacement of the child.\n+        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\n+            // Grab the parent.\n+            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\n+            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\n+                // This transaction would be left over, so add to the new\n+                // diagram.\n+                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\n+            }\n+        }\n+    }\n+    // + CNK\n+    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I understand what happens here but its a bit confusing to me the short forms `CON`, `CNK` `DIAGRAM`\r\nWill prefer something like the compute in computing the `OLD` chunk\r\n\r\n```suggestion\r\n    // Step 2: build the new diagram\r\n\r\n    // Add any parents of direct conflicts that are not conflicted themselves into the NEW chunk\r\n    for (auto direct_conflict : direct_conflicts) {\r\n        // If a direct conflict has an ancestor that is not in all_conflicts,\r\n        // it can be affected by the replacement of the child.\r\n        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\r\n            // Grab the parent.\r\n            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\r\n            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\r\n                // This transaction would be left over, so add to the NEW\r\n                // chunk.\r\n                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\r\n            }\r\n        }\r\n    }\r\n    // Add the replacement package to NEW\r\n    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));\r\n```",
    "created_at": "2024-01-16T15:52:23Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453626393",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453626393"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453626393"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453626393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1348,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1363,
    "side": "RIGHT",
    "original_position": 125,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453667765",
    "pull_request_review_id": 1823506588,
    "id": 1453667765,
    "node_id": "PRRC_kwDOABII585WpTW1",
    "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
    "path": "src/policy/rbf.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should forward the detailed error message also?",
    "created_at": "2024-01-16T16:23:36Z",
    "updated_at": "2024-01-16T20:00:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453667765",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453667765"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453667765"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453667765/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 300,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 204,
    "side": "RIGHT",
    "original_position": 133,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455418545",
    "pull_request_review_id": 1827173808,
    "id": 1455418545,
    "node_id": "PRRC_kwDOABII585Wv-yx",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};\n+    FeeFrac empty{0, 0};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Even better, I'll add a test that they're the same",
    "created_at": "2024-01-17T12:19:19Z",
    "updated_at": "2024-01-17T12:19:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455418545",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455418545"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455418545"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455418545/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 17,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 1453501485,
    "original_position": 17,
    "position": 17,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455423851",
    "pull_request_review_id": 1827178150,
    "id": 1455423851,
    "node_id": "PRRC_kwDOABII585WwAFr",
    "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);\n+                old_chunks.emplace_back(individual);\n+            }\n+        } else {\n+            old_chunks.emplace_back(individual);\n+        }\n+    }\n+\n+    // No topology restrictions post-chunking; sort\n+    BuildDiagramFromUnsortedChunks(old_chunks, old_diagram);\n+\n+    std::vector<FeeFrac> new_chunks;\n+\n+    // Step 2: build the NEW = OLD - CON + CNK diagram\n+\n+    // OLD - CON: Any parents of direct conflicts that are not conflicted themselves\n+    for (auto direct_conflict : direct_conflicts) {\n+        // If a direct conflict has an ancestor that is not in all_conflicts,\n+        // it can be affected by the replacement of the child.\n+        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\n+            // Grab the parent.\n+            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\n+            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\n+                // This transaction would be left over, so add to the new\n+                // diagram.\n+                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\n+            }\n+        }\n+    }\n+    // + CNK\n+    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "These are shorthand labels from https://delvingbitcoin.org/t/post-clustermempool-package-rbf-per-chunk-processing/190 which helped me think through preciesely how it maps onto the concepts laid out.\r\n\r\nI'd like to keep track of these ideas somehow, maybe by defining the labels?",
    "created_at": "2024-01-17T12:21:54Z",
    "updated_at": "2024-01-17T12:21:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455423851",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455423851"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455423851"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455423851/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1348,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1363,
    "side": "RIGHT",
    "in_reply_to_id": 1453626393,
    "original_position": 125,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455426826",
    "pull_request_review_id": 1827180557,
    "id": 1455426826,
    "node_id": "PRRC_kwDOABII585WwA0K",
    "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
    "path": "src/policy/rbf.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "can you be more explicit in suggestion? The errors are being returned?",
    "created_at": "2024-01-17T12:23:21Z",
    "updated_at": "2024-01-17T12:23:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455426826",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455426826"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455426826"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455426826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 300,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 204,
    "side": "RIGHT",
    "in_reply_to_id": 1453667765,
    "original_position": 133,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455433932",
    "pull_request_review_id": 1827186462,
    "id": 1455433932,
    "node_id": "PRRC_kwDOABII585WwCjM",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "this is testing that subtraction works correctly, not that an individual chunk can have negative size",
    "created_at": "2024-01-17T12:26:54Z",
    "updated_at": "2024-01-17T12:26:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455433932",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455433932"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455433932"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455433932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 1453502118,
    "original_position": 16,
    "position": 16,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455527026",
    "pull_request_review_id": 1827266447,
    "id": 1455527026,
    "node_id": "PRRC_kwDOABII585WwZRy",
    "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
    "path": "src/policy/rbf.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I meant what is being returned by `err_string` and `CompareFeerateDiagram` was not used. why were you unable to compute mining score, same for `CompareFeerateDiagram` why is the fee rate insufficient.",
    "created_at": "2024-01-17T13:11:40Z",
    "updated_at": "2024-01-17T13:11:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455527026",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455527026"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455527026"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455527026/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 300,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 204,
    "side": "RIGHT",
    "in_reply_to_id": 1453667765,
    "original_position": 133,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455534078",
    "pull_request_review_id": 1827272350,
    "id": 1455534078,
    "node_id": "PRRC_kwDOABII585Wwa_-",
    "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "also, `Subtrack` isn't a word...",
    "created_at": "2024-01-17T13:14:53Z",
    "updated_at": "2024-01-17T13:14:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455534078",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455534078"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455534078"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455534078/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 84,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 91,
    "side": "RIGHT",
    "in_reply_to_id": 1453480372,
    "original_position": 91,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455539143",
    "pull_request_review_id": 1827276759,
    "id": 1455539143,
    "node_id": "PRRC_kwDOABII585WwcPH",
    "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);\n+                old_chunks.emplace_back(individual);\n+            }\n+        } else {\n+            old_chunks.emplace_back(individual);\n+        }\n+    }\n+\n+    // No topology restrictions post-chunking; sort\n+    BuildDiagramFromUnsortedChunks(old_chunks, old_diagram);\n+\n+    std::vector<FeeFrac> new_chunks;\n+\n+    // Step 2: build the NEW = OLD - CON + CNK diagram\n+\n+    // OLD - CON: Any parents of direct conflicts that are not conflicted themselves\n+    for (auto direct_conflict : direct_conflicts) {\n+        // If a direct conflict has an ancestor that is not in all_conflicts,\n+        // it can be affected by the replacement of the child.\n+        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\n+            // Grab the parent.\n+            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\n+            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\n+                // This transaction would be left over, so add to the new\n+                // diagram.\n+                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\n+            }\n+        }\n+    }\n+    // + CNK\n+    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\r\nYeah, maybe to be consistent define the labels and do the same in the  `OLD` `chunk` computation loop above.\r\nThough  the explicit comments in the `OLD`  `chunk` computation loop is more easier to parse for me :).",
    "created_at": "2024-01-17T13:17:06Z",
    "updated_at": "2024-01-17T13:17:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455539143",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455539143"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455539143"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455539143/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1348,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1363,
    "side": "RIGHT",
    "in_reply_to_id": 1453626393,
    "original_position": 125,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455544265",
    "pull_request_review_id": 1827280890,
    "id": 1455544265,
    "node_id": "PRRC_kwDOABII585WwdfJ",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, My question was... whats the rationale for `FeeFrac` to generally have negative size ?",
    "created_at": "2024-01-17T13:19:22Z",
    "updated_at": "2024-01-17T13:19:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455544265",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455544265"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455544265"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455544265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 1453502118,
    "original_position": 16,
    "position": 16,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455658183",
    "pull_request_review_id": 1827381635,
    "id": 1455658183,
    "node_id": "PRRC_kwDOABII585Ww5TH",
    "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
    "path": "src/policy/rbf.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "CompareFeerateDiagram won't return much very interesting, but you're right for the `err_string`, will return it",
    "created_at": "2024-01-17T14:08:17Z",
    "updated_at": "2024-01-17T14:08:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455658183",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455658183"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455658183"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455658183/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 300,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 204,
    "side": "RIGHT",
    "in_reply_to_id": 1453667765,
    "original_position": 133,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459252934",
    "pull_request_review_id": 1833137718,
    "id": 1459252934,
    "node_id": "PRRC_kwDOABII585W-m7G",
    "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
    "path": "src/policy/rbf.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T16:01:18Z",
    "updated_at": "2024-01-19T16:01:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459252934",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459252934"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459252934"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459252934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 300,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 204,
    "side": "RIGHT",
    "in_reply_to_id": 1453667765,
    "original_position": 133,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253057",
    "pull_request_review_id": 1833138006,
    "id": 1459253057,
    "node_id": "PRRC_kwDOABII585W-m9B",
    "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);\n+                old_chunks.emplace_back(individual);\n+            }\n+        } else {\n+            old_chunks.emplace_back(individual);\n+        }\n+    }\n+\n+    // No topology restrictions post-chunking; sort\n+    BuildDiagramFromUnsortedChunks(old_chunks, old_diagram);\n+\n+    std::vector<FeeFrac> new_chunks;\n+\n+    // Step 2: build the NEW = OLD - CON + CNK diagram\n+\n+    // OLD - CON: Any parents of direct conflicts that are not conflicted themselves\n+    for (auto direct_conflict : direct_conflicts) {\n+        // If a direct conflict has an ancestor that is not in all_conflicts,\n+        // it can be affected by the replacement of the child.\n+        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\n+            // Grab the parent.\n+            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\n+            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\n+                // This transaction would be left over, so add to the new\n+                // diagram.\n+                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\n+            }\n+        }\n+    }\n+    // + CNK\n+    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "took some of hte language, and explicitly defined each term",
    "created_at": "2024-01-19T16:01:24Z",
    "updated_at": "2024-01-19T16:01:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253057",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253057"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253057"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253057/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1348,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1363,
    "side": "RIGHT",
    "in_reply_to_id": 1453626393,
    "original_position": 125,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253223",
    "pull_request_review_id": 1833138370,
    "id": 1459253223,
    "node_id": "PRRC_kwDOABII585W-m_n",
    "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T16:01:31Z",
    "updated_at": "2024-01-19T16:01:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253223",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253223"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253223"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1327,
    "side": "RIGHT",
    "in_reply_to_id": 1453612523,
    "original_position": 87,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253328",
    "pull_request_review_id": 1833138587,
    "id": 1459253328,
    "node_id": "PRRC_kwDOABII585W-nBQ",
    "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T16:01:35Z",
    "updated_at": "2024-01-19T16:01:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253328",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253328"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253328"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1305,
    "side": "RIGHT",
    "in_reply_to_id": 1453604924,
    "original_position": 65,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253396",
    "pull_request_review_id": 1833138722,
    "id": 1459253396,
    "node_id": "PRRC_kwDOABII585W-nCU",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We use subtraction, and should try to handle that?",
    "created_at": "2024-01-19T16:01:37Z",
    "updated_at": "2024-01-19T16:01:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253396",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253396"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253396"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253396/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 1453502118,
    "original_position": 16,
    "position": 16,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253460",
    "pull_request_review_id": 1833138857,
    "id": 1459253460,
    "node_id": "PRRC_kwDOABII585W-nDU",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};\n+    FeeFrac empty{0, 0};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T16:01:40Z",
    "updated_at": "2024-01-19T16:01:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253460",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253460"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253460"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 17,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 1453501485,
    "original_position": 17,
    "position": 17,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253539",
    "pull_request_review_id": 1833139037,
    "id": 1459253539,
    "node_id": "PRRC_kwDOABII585W-nEj",
    "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    friend inline std::strong_ordering FeeRateCompare(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        if (a.fee > INT32_MAX || a.fee < INT32_MIN || b.fee > INT32_MAX || b.fee < INT32_MIN) {\n+            auto a_cross = Mul128(a.fee, b.size);\n+            auto b_cross = Mul128(b.fee, a.size);\n+            return a_cross <=> b_cross;\n+        } else {\n+            auto a_cross = a.fee * b.size;\n+            auto b_cross = b.fee * a.size;\n+            return a_cross <=> b_cross;\n+        }\n+    }\n+\n+    friend inline std::strong_ordering operator<=>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto feerate_cmp = FeeRateCompare(a, b);\n+        if (feerate_cmp != 0) return feerate_cmp; // NOLINT(modernize-use-nullptr)\n+        return b.size <=> a.size;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly lower feerate than another. */\n+    friend inline bool operator<<(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return FeeRateCompare(a, b) < 0; // NOLINT(modernize-use-nullptr)\n+    }\n+\n+    /** Check if a FeeFrac object has strictly higher feerate than another. */\n+    friend inline bool operator>>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return FeeRateCompare(a, b) > 0; // NOLINT(modernize-use-nullptr)\n+    }\n+\n+    friend inline void swap(FeeFrac& a, FeeFrac& b) noexcept\n+    {\n+        std::swap(a.fee, b.fee);\n+        std::swap(a.size, b.size);\n+    }\n+};\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram);",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added comment",
    "created_at": "2024-01-19T16:01:43Z",
    "updated_at": "2024-01-19T16:01:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253539",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253539"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253539"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 150,
    "side": "RIGHT",
    "in_reply_to_id": 1453487633,
    "original_position": 156,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253631",
    "pull_request_review_id": 1833139134,
    "id": 1459253631,
    "node_id": "PRRC_kwDOABII585W-nF_",
    "diff_hunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();\n+    // Finish by sorting the chunks we calculated, and then accumulating them.\n+    std::sort(chunks.begin(), chunks.end(), [](const FeeFrac& a, const FeeFrac& b) { return a > b; });\n+\n+    // And now build the diagram for these chunks.\n+    diagram.emplace_back(0, 0);\n+    for (auto& chunk : chunks) {\n+        FeeFrac& last = diagram.back();\n+        diagram.emplace_back(last.fee+chunk.fee, last.size+chunk.size);\n+    }\n+    return;\n+}",
    "path": "src/util/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T16:01:46Z",
    "updated_at": "2024-01-19T16:01:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253631",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253631"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253631"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253631/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 19,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 1453482107,
    "original_position": 20,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253686",
    "pull_request_review_id": 1833139262,
    "id": 1459253686,
    "node_id": "PRRC_kwDOABII585W-nG2",
    "diff_hunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();",
    "path": "src/util/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T16:01:48Z",
    "updated_at": "2024-01-19T16:01:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253686",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253686"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253686"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253686/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT",
    "in_reply_to_id": 1453480679,
    "original_position": 9,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253728",
    "pull_request_review_id": 1833139379,
    "id": 1459253728,
    "node_id": "PRRC_kwDOABII585W-nHg",
    "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T16:01:50Z",
    "updated_at": "2024-01-19T16:01:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253728",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253728"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253728"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253728/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 84,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 91,
    "side": "RIGHT",
    "in_reply_to_id": 1453480372,
    "original_position": 91,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459264030",
    "pull_request_review_id": 1833161137,
    "id": 1459264030,
    "node_id": "PRRC_kwDOABII585W-poe",
    "diff_hunk": "@@ -106,4 +108,23 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/**\n+ * The replacement transaction must improve the feerate diagram of the mempool.\n+ * @param[in]   pool                The mempool.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the direct conflicts\n+ * @param[in]   all_conflicts       Set of mempool entries corresponding to all conflicts\n+ * @param[in]   replacement_fees    Fees of replacement package\n+ * @param[in]   replacement_vsize   Size of replacement package\n+ * @returns error string if mempool diagram doesn't improve, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                CAmount replacement_fees,\n+                                                int64_t replacement_vsize)\n+                                                EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Compares two feerate diagrams. The shorter one is padded with a horizonal line. */\n+std::partial_ordering CompareFeerateDiagram(std::vector<FeeFrac>& dia0, std::vector<FeeFrac>& dia1);",
    "path": "src/policy/rbf.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: perhaps this function belongs more in util/feefrac (as the building of the diagram also lives there)",
    "created_at": "2024-01-19T16:09:00Z",
    "updated_at": "2024-01-19T16:42:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459264030",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459264030"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459264030"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459264030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 128,
    "side": "RIGHT",
    "original_position": 31,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459279118",
    "pull_request_review_id": 1833161137,
    "id": 1459279118,
    "node_id": "PRRC_kwDOABII585W-tUO",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I can think of one use case where negative sizes are actually useful, though it's pretty far fetched.\r\n\r\nCurrently the code hardcodes a \"tail feerate\" (the feerate of which we assume there is an infinite supply) of 0 sat/vB for mempool improvement checks, but in theory this can be configurable. In that case, in addition to the diagram check between old and new package, we want the property that `fee_new >= fee_old + (size_new - size_old) * feerate_tail`. If `old`, `new`, and `tail` are CFeeFrac objects, this condition is exactly `!((new - old) << tail)`. If new is smaller than old, the `new - old` object has negative size.\r\n\r\nA more pragmatic answer is that there is no real reason to restrict it to just positive sizes, and not enforcing it is simpler.",
    "created_at": "2024-01-19T16:18:54Z",
    "updated_at": "2024-01-19T16:42:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459279118",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459279118"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459279118"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459279118/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 1453502118,
    "original_position": 16,
    "position": 16,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459281387",
    "pull_request_review_id": 1833161137,
    "id": 1459281387,
    "node_id": "PRRC_kwDOABII585W-t3r",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: std::array.",
    "created_at": "2024-01-19T16:20:13Z",
    "updated_at": "2024-01-19T16:42:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459281387",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459281387"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459281387"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459281387/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT",
    "original_position": 47,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459282903",
    "pull_request_review_id": 1833161137,
    "id": 1459282903,
    "node_id": "PRRC_kwDOABII585W-uPX",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] < b[i]) return std::strong_ordering::less;",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: EMBRACE THE SPACESHIP\r\n\r\n```c++\r\nif (a[i] != b[i]) return a[i] <=> b[i];\r\n```",
    "created_at": "2024-01-19T16:21:09Z",
    "updated_at": "2024-01-19T16:42:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459282903",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459282903"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459282903"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459282903/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "original_position": 50,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459283849",
    "pull_request_review_id": 1833161137,
    "id": 1459283849,
    "node_id": "PRRC_kwDOABII585W-ueJ",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Self-nit: `2^64` -> `2^32`",
    "created_at": "2024-01-19T16:21:44Z",
    "updated_at": "2024-01-19T16:42:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459283849",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459283849"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459283849"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459283849/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 39,
    "side": "RIGHT",
    "original_position": 39,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459309396",
    "pull_request_review_id": 1833161137,
    "id": 1459309396,
    "node_id": "PRRC_kwDOABII585W-0tU",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Suggested change that (I believe) avoids the need for suppressions (and may be more readable?):\r\n\r\n```c++\r\n    auto add_fn = [&](uint64_t v, int pos) {\r\n        uint64_t accum{0};\r\n        for (int i = 0; i + pos < 4; ++i) {\r\n            // Add current value at limb pos in ret.\r\n            accum += ret[3 - pos - i];\r\n            // Add low or high half of v.\r\n            if (i == 0) accum += v & 0xffffffff;\r\n            if (i == 1) accum += v >> 32;\r\n            // Store lower half of result in limb pos in ret.\r\n            ret[3 - pos - i] = accum & 0xffffffff;\r\n            // Leave carry in accum.\r\n            accum >>= 32;\r\n        }\r\n        // Make sure no overflow.\r\n        assert(accum == 0);\r\n    };\r\n```",
    "created_at": "2024-01-19T16:36:25Z",
    "updated_at": "2024-01-19T16:42:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459309396",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459309396"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459309396"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459309396/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 22,
    "original_line": 22,
    "side": "RIGHT",
    "original_position": 22,
    "position": 22,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459312210",
    "pull_request_review_id": 1833161137,
    "id": 1459312210,
    "node_id": "PRRC_kwDOABII585W-1ZS",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] < b[i]) return std::strong_ordering::less;\n+        if (a[i] > b[i]) return std::strong_ordering::greater;\n+    }\n+    return std::strong_ordering::equal;\n+}\n+\n+std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n+{\n+    // Compute and compare signs.\n+    int sign_a = (a1 == 0 ? 0 : a1 < 0 ? -1 : 1) * (a2 == 0 ? 0 : a2 < 0 ? -1 : 1);\n+    int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n+    if (sign_a != sign_b) return sign_a <=> sign_b;\n+\n+    // Compute absolute values.",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Avoid the need for a suppression:\r\n\r\n```c++\r\n// Compute absolute values.\r\nuint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\r\nuint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\r\n// Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\r\n// intentional here.\r\nif (a1 < 0) abs_a1 = ~abs_a1 + 1;\r\nif (a2 < 0) abs_a2 = ~abs_a2 + 1;\r\nif (b1 < 0) abs_b1 = ~abs_b1 + 1;\r\nif (b2 < 0) abs_b2 = ~abs_b2 + 1;\r\n```\r\n\r\n(The same trick is used in `CScriptNum::serialize`, it could be abstracted out)",
    "created_at": "2024-01-19T16:38:05Z",
    "updated_at": "2024-01-19T17:31:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459312210",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459312210"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459312210"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459312210/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 62,
    "original_line": 62,
    "side": "RIGHT",
    "original_position": 63,
    "position": 62,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459315118",
    "pull_request_review_id": 1833161137,
    "id": 1459315118,
    "node_id": "PRRC_kwDOABII585W-2Gu",
    "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Self-nit: no need for this `namespace` anymore.",
    "created_at": "2024-01-19T16:39:47Z",
    "updated_at": "2024-01-19T16:42:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459315118",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459315118"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459315118"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459315118/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 13,
    "side": "RIGHT",
    "original_position": 13,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459316281",
    "pull_request_review_id": 1833161137,
    "id": 1459316281,
    "node_id": "PRRC_kwDOABII585W-2Y5",
    "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {\n+\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t f, int32_t s) noexcept : fee{f}, size{s}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add fee and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Subtract fee and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    /** Check if two FeeFrac objects are different (either fee or size differs). */\n+    friend inline bool operator!=(const FeeFrac& a, const FeeFrac& b) noexcept",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Self-nit: this operator can be dropped (C++20 will automatically generate it as negation of `operator==`).",
    "created_at": "2024-01-19T16:40:32Z",
    "updated_at": "2024-01-19T16:42:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459316281",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459316281"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459316281"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459316281/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "original_position": 125,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459317381",
    "pull_request_review_id": 1833161137,
    "id": 1459317381,
    "node_id": "PRRC_kwDOABII585W-2qF",
    "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {\n+\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t f, int32_t s) noexcept : fee{f}, size{s}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add fee and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Subtract fee and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    /** Check if two FeeFrac objects are different (either fee or size differs). */\n+    friend inline bool operator!=(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee != b.fee || a.size != b.size;\n+    }\n+\n+    /** Compare two FeeFracs just by feerate. */\n+    friend inline std::weak_ordering FeeRateCompare(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly lower feerate than another. */\n+    friend inline bool operator<<(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a < cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly higher feerate than another. */\n+    friend inline bool operator>>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a > cross_b;\n+    }\n+\n+    /** Compare two FeeFracs. */\n+    friend inline std::strong_ordering operator<=>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        if (cross_a == cross_b) return b.size <=> a.size;\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object is worse than another. */\n+    friend inline bool operator<(const FeeFrac& a, const FeeFrac& b) noexcept",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Self-nit: `operator<`, `operator>`, `operator<=` and `operator>=` can be dropped (C++20 will autogenerate them using `operator<=>` (inspecting the compiled code, it's marginally less efficient, but all the actually performance-critical uses use `operator<<`, `operator>>`, or `FeeRateCompare` anyway).",
    "created_at": "2024-01-19T16:41:05Z",
    "updated_at": "2024-01-19T16:42:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459317381",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459317381"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459317381"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459317381/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 160,
    "side": "RIGHT",
    "original_position": 160,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709324",
    "pull_request_review_id": 1833628032,
    "id": 1459709324,
    "node_id": "PRRC_kwDOABII585XAWWM",
    "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {\n+\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t f, int32_t s) noexcept : fee{f}, size{s}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add fee and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Subtract fee and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    /** Check if two FeeFrac objects are different (either fee or size differs). */\n+    friend inline bool operator!=(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee != b.fee || a.size != b.size;\n+    }\n+\n+    /** Compare two FeeFracs just by feerate. */\n+    friend inline std::weak_ordering FeeRateCompare(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly lower feerate than another. */\n+    friend inline bool operator<<(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a < cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly higher feerate than another. */\n+    friend inline bool operator>>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a > cross_b;\n+    }\n+\n+    /** Compare two FeeFracs. */\n+    friend inline std::strong_ordering operator<=>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        if (cross_a == cross_b) return b.size <=> a.size;\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object is worse than another. */\n+    friend inline bool operator<(const FeeFrac& a, const FeeFrac& b) noexcept",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T20:25:20Z",
    "updated_at": "2024-01-19T20:25:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709324",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709324"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709324"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 160,
    "side": "RIGHT",
    "in_reply_to_id": 1459317381,
    "original_position": 160,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709417",
    "pull_request_review_id": 1833628227,
    "id": 1459709417,
    "node_id": "PRRC_kwDOABII585XAWXp",
    "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {\n+\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t f, int32_t s) noexcept : fee{f}, size{s}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add fee and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Subtract fee and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    /** Check if two FeeFrac objects are different (either fee or size differs). */\n+    friend inline bool operator!=(const FeeFrac& a, const FeeFrac& b) noexcept",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T20:25:25Z",
    "updated_at": "2024-01-19T20:25:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709417",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709417"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709417"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 1459316281,
    "original_position": 125,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709496",
    "pull_request_review_id": 1833628323,
    "id": 1459709496,
    "node_id": "PRRC_kwDOABII585XAWY4",
    "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T20:25:28Z",
    "updated_at": "2024-01-19T20:25:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709496",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709496"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709496"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709496/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 13,
    "side": "RIGHT",
    "in_reply_to_id": 1459315118,
    "original_position": 13,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709630",
    "pull_request_review_id": 1833628458,
    "id": 1459709630,
    "node_id": "PRRC_kwDOABII585XAWa-",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] < b[i]) return std::strong_ordering::less;\n+        if (a[i] > b[i]) return std::strong_ordering::greater;\n+    }\n+    return std::strong_ordering::equal;\n+}\n+\n+std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n+{\n+    // Compute and compare signs.\n+    int sign_a = (a1 == 0 ? 0 : a1 < 0 ? -1 : 1) * (a2 == 0 ? 0 : a2 < 0 ? -1 : 1);\n+    int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n+    if (sign_a != sign_b) return sign_a <=> sign_b;\n+\n+    // Compute absolute values.",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T20:25:34Z",
    "updated_at": "2024-01-19T20:25:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709630",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709630"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709630"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709630/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 62,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 1459312210,
    "original_position": 63,
    "position": 62,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709663",
    "pull_request_review_id": 1833628511,
    "id": 1459709663,
    "node_id": "PRRC_kwDOABII585XAWbf",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "looks good, done",
    "created_at": "2024-01-19T20:25:36Z",
    "updated_at": "2024-01-19T20:25:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709663",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709663"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709663"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 22,
    "original_line": 22,
    "side": "RIGHT",
    "in_reply_to_id": 1459309396,
    "original_position": 22,
    "position": 22,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709766",
    "pull_request_review_id": 1833628606,
    "id": 1459709766,
    "node_id": "PRRC_kwDOABII585XAWdG",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T20:25:40Z",
    "updated_at": "2024-01-19T20:25:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709766",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709766"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709766"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709766/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 39,
    "side": "RIGHT",
    "in_reply_to_id": 1459283849,
    "original_position": 39,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709852",
    "pull_request_review_id": 1833628685,
    "id": 1459709852,
    "node_id": "PRRC_kwDOABII585XAWec",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] < b[i]) return std::strong_ordering::less;",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T20:25:44Z",
    "updated_at": "2024-01-19T20:25:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709852",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709852"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709852"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 1459282903,
    "original_position": 50,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709932",
    "pull_request_review_id": 1833628778,
    "id": 1459709932,
    "node_id": "PRRC_kwDOABII585XAWfs",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-19T20:25:48Z",
    "updated_at": "2024-01-19T20:25:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709932",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709932"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709932"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT",
    "in_reply_to_id": 1459281387,
    "original_position": 47,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459710174",
    "pull_request_review_id": 1833628978,
    "id": 1459710174,
    "node_id": "PRRC_kwDOABII585XAWje",
    "diff_hunk": "@@ -106,4 +108,23 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/**\n+ * The replacement transaction must improve the feerate diagram of the mempool.\n+ * @param[in]   pool                The mempool.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the direct conflicts\n+ * @param[in]   all_conflicts       Set of mempool entries corresponding to all conflicts\n+ * @param[in]   replacement_fees    Fees of replacement package\n+ * @param[in]   replacement_vsize   Size of replacement package\n+ * @returns error string if mempool diagram doesn't improve, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                CAmount replacement_fees,\n+                                                int64_t replacement_vsize)\n+                                                EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Compares two feerate diagrams. The shorter one is padded with a horizonal line. */\n+std::partial_ordering CompareFeerateDiagram(std::vector<FeeFrac>& dia0, std::vector<FeeFrac>& dia1);",
    "path": "src/policy/rbf.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "makes sense, moved",
    "created_at": "2024-01-19T20:25:58Z",
    "updated_at": "2024-01-19T20:25:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459710174",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459710174"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459710174"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459710174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 128,
    "side": "RIGHT",
    "in_reply_to_id": 1459264030,
    "original_position": 31,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462332681",
    "pull_request_review_id": 1837231759,
    "id": 1462332681,
    "node_id": "PRRC_kwDOABII585XKW0J",
    "diff_hunk": "@@ -19,6 +19,8 @@\n #include <limits>\n #include <vector>\n \n+#include <compare>",
    "path": "src/policy/rbf.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In the commit message of \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\n\r\n> This new function takes the populated sets of\r\n> direct and all conflicts computed in the current\r\n> mempool, assuming the replacements are a single\r\n> chunk, and computes a diagram check.\r\n\r\nThe first sentence is confusing to me. Could you perhaps clarify \"the populated sets of direct and all conflicts\" and split the sentence up?",
    "created_at": "2024-01-22T19:42:17Z",
    "updated_at": "2024-01-22T21:59:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462332681",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462332681"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462332681"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462332681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 22,
    "original_line": 22,
    "side": "RIGHT",
    "original_position": 4,
    "position": 4,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462348934",
    "pull_request_review_id": 1837231759,
    "id": 1462348934,
    "node_id": "PRRC_kwDOABII585XKayG",
    "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\nNit: The documentation is in opposite order as the checks. Perhaps switch these two lines.",
    "created_at": "2024-01-22T19:55:55Z",
    "updated_at": "2024-01-22T21:59:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462348934",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462348934"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462348934"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462348934/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1274,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1264,
    "side": "RIGHT",
    "original_position": 35,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462350586",
    "pull_request_review_id": 1837231759,
    "id": 1462350586,
    "node_id": "PRRC_kwDOABII585XKbL6",
    "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\n\r\n```suggestion\r\n            return strprintf(\"%s has both ancestor and descendant, exceeding cluster limit of 2\", txid_string);\r\n```",
    "created_at": "2024-01-22T19:57:44Z",
    "updated_at": "2024-01-22T21:59:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462350586",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462350586"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462350586"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462350586/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1271,
    "side": "RIGHT",
    "original_position": 31,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462365378",
    "pull_request_review_id": 1837231759,
    "id": 1462365378,
    "node_id": "PRRC_kwDOABII585XKezC",
    "diff_hunk": "@@ -106,4 +115,20 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/**\n+ * The replacement transaction must improve the feerate diagram of the mempool.\n+ * @param[in]   pool                The mempool.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the direct conflicts\n+ * @param[in]   all_conflicts       Set of mempool entries corresponding to all conflicts",
    "path": "src/policy/rbf.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\nMaybe that’s my unfamiliarity with the mempool code, but it is not obvious to me what \"direct_conflicts\" and \"all_conflicts\" are, and the description here is self-referential. Do these transactions belong to original, replacement, or both, etc.?",
    "created_at": "2024-01-22T20:12:42Z",
    "updated_at": "2024-01-22T21:59:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462365378",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462365378"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462365378"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462365378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 121,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 122,
    "side": "RIGHT",
    "original_position": 32,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462385881",
    "pull_request_review_id": 1837231759,
    "id": 1462385881,
    "node_id": "PRRC_kwDOABII585XKjzZ",
    "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of all_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // OLD: Compute existing chunks from all affected clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), static_cast<int32_t>(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\nNit: Spaces around that minus? It took me a moment to realize that dashes aren’t a thing in variables. ",
    "created_at": "2024-01-22T20:34:34Z",
    "updated_at": "2024-01-22T21:59:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462385881",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462385881"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462385881"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462385881/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1335,
    "side": "RIGHT",
    "original_position": 95,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462412782",
    "pull_request_review_id": 1837231759,
    "id": 1462412782,
    "node_id": "PRRC_kwDOABII585XKqXu",
    "diff_hunk": "@@ -734,6 +735,23 @@ class CTxMemPool\n         return m_sequence_number;\n     }\n \n+    /**\n+     * Calculate the old and new mempool feerate diagrams relating to the\n+     * clusters that would be affected by a potential replacement transaction.\n+     *\n+     * @param[in] replacement_fees    Package fees\n+     * @param[in] replacement_vsize   Package size\n+     * @param[in] direct_conflicts    All transactions that would be removed directly (not via descendants)",
    "path": "src/txmempool.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\n\r\n```suggestion\r\n     * @param[in] direct_conflicts    All transactions that would be removed directly (not by being descendants of conflicting transactions)\r\n```",
    "created_at": "2024-01-22T20:55:51Z",
    "updated_at": "2024-01-22T21:59:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462412782",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462412782"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462412782"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462412782/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 744,
    "side": "RIGHT",
    "original_position": 18,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462453899",
    "pull_request_review_id": 1837231759,
    "id": 1462453899,
    "node_id": "PRRC_kwDOABII585XK0aL",
    "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In \"test: Add tests for CompareFeerateDiagram and CheckConflictTopology\" (b3d415fe84be7edfbed567a79a25d406b438622b):\r\nNit: I found the comment here confusing. How about: \"`new_diagram` is strictly better due to the first chunk, while the second chunk is worse.\"",
    "created_at": "2024-01-22T21:40:35Z",
    "updated_at": "2024-01-22T21:59:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462453899",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462453899"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462453899"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462453899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 296,
    "side": "RIGHT",
    "original_position": 206,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462457196",
    "pull_request_review_id": 1837231759,
    "id": 1462457196,
    "node_id": "PRRC_kwDOABII585XK1Ns",
    "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 100}, FeeFrac{1100, 200}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is better, but second chunk is worse\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{999, 350}, FeeFrac{1150, 500}};",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In \"test: Add tests for CompareFeerateDiagram and CheckConflictTopology\" (b3d415fe84be7edfbed567a79a25d406b438622b):\r\n\r\nNit: in the new diagram, the last two chunks should be one chunk because the last chunk is better (151 sats, 150 vB) than the prior (249 sats, 250 vB).",
    "created_at": "2024-01-22T21:44:38Z",
    "updated_at": "2024-01-22T21:59:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462457196",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462457196"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462457196"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462457196/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 303,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 304,
    "side": "RIGHT",
    "original_position": 214,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462462868",
    "pull_request_review_id": 1837231759,
    "id": 1462462868,
    "node_id": "PRRC_kwDOABII585XK2mU",
    "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 100}, FeeFrac{1100, 200}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is better, but second chunk is worse\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{999, 350}, FeeFrac{1150, 500}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // If we make the second chunk slightly better, the new diagram now wins.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{1000, 350}, FeeFrac{1150, 500}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Identical diagrams, cannot be strictly better\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+\n+    BOOST_CHECK(std::is_eq(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Same aggregate fee, but different total size (trigger single tail fee check step)\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+\n+    // No change in evaluation when tail check needed.\n+    BOOST_CHECK(std::is_gt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\n+",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In \"test: Add tests for CompareFeerateDiagram and CheckConflictTopology\" (b3d415fe84be7edfbed567a79a25d406b438622b):\r\n\r\nThis is the same old_diagram. Did you mean to repeat the same transactions,\r\n```suggestion\r\n\r\n    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\r\n    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\r\n```\r\nor just test in both directions?\r\n```suggestion\r\n```",
    "created_at": "2024-01-22T21:51:02Z",
    "updated_at": "2024-01-22T21:59:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462462868",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462462868"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462462868"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462462868/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 326,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 328,
    "side": "RIGHT",
    "original_position": 238,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463281056",
    "pull_request_review_id": 1838789825,
    "id": 1463281056,
    "node_id": "PRRC_kwDOABII585XN-Wg",
    "diff_hunk": "@@ -19,6 +19,8 @@\n #include <limits>\n #include <vector>\n \n+#include <compare>",
    "path": "src/policy/rbf.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "direct_conflicts and all_conflicts. Does that help?",
    "created_at": "2024-01-23T13:26:49Z",
    "updated_at": "2024-01-23T13:26:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463281056",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463281056"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463281056"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463281056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 22,
    "original_line": 22,
    "side": "RIGHT",
    "in_reply_to_id": 1462332681,
    "original_position": 4,
    "position": 4,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463285858",
    "pull_request_review_id": 1838797602,
    "id": 1463285858,
    "node_id": "PRRC_kwDOABII585XN_hi",
    "diff_hunk": "@@ -106,4 +115,20 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/**\n+ * The replacement transaction must improve the feerate diagram of the mempool.\n+ * @param[in]   pool                The mempool.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the direct conflicts\n+ * @param[in]   all_conflicts       Set of mempool entries corresponding to all conflicts",
    "path": "src/policy/rbf.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "direct_conflicts -> the set of transactions that have at least one input conflicting with a proposed transaction.\r\nall_conflicts -> Everything that would be evicted by the proposed transaction\r\n\r\nI'll touch this up a bit but this is the nomenclature elsewhere",
    "created_at": "2024-01-23T13:30:37Z",
    "updated_at": "2024-01-23T13:30:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463285858",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463285858"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463285858"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463285858/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 121,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 122,
    "side": "RIGHT",
    "in_reply_to_id": 1462365378,
    "original_position": 32,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314427",
    "pull_request_review_id": 1838845793,
    "id": 1463314427,
    "node_id": "PRRC_kwDOABII585XOGf7",
    "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 100}, FeeFrac{1100, 200}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is better, but second chunk is worse\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{999, 350}, FeeFrac{1150, 500}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // If we make the second chunk slightly better, the new diagram now wins.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{1000, 350}, FeeFrac{1150, 500}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Identical diagrams, cannot be strictly better\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+\n+    BOOST_CHECK(std::is_eq(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Same aggregate fee, but different total size (trigger single tail fee check step)\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+\n+    // No change in evaluation when tail check needed.\n+    BOOST_CHECK(std::is_gt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\n+",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I can't recall honestly, removed that line",
    "created_at": "2024-01-23T13:51:39Z",
    "updated_at": "2024-01-23T13:51:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314427",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314427"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314427"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 326,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 328,
    "side": "RIGHT",
    "in_reply_to_id": 1462462868,
    "original_position": 238,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314511",
    "pull_request_review_id": 1838845897,
    "id": 1463314511,
    "node_id": "PRRC_kwDOABII585XOGhP",
    "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 100}, FeeFrac{1100, 200}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is better, but second chunk is worse\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{999, 350}, FeeFrac{1150, 500}};",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ah hmm, I'm not sure that matters for correctness of test, but jacked up the last chunk's size just to make it clearer what we're testing",
    "created_at": "2024-01-23T13:51:42Z",
    "updated_at": "2024-01-23T13:51:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314511",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314511"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314511"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 303,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 304,
    "side": "RIGHT",
    "in_reply_to_id": 1462457196,
    "original_position": 214,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314570",
    "pull_request_review_id": 1838845988,
    "id": 1463314570,
    "node_id": "PRRC_kwDOABII585XOGiK",
    "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "tried my own re-explanation. I agree as-is is confusing",
    "created_at": "2024-01-23T13:51:45Z",
    "updated_at": "2024-01-23T13:51:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314570",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314570"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314570"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 296,
    "side": "RIGHT",
    "in_reply_to_id": 1462453899,
    "original_position": 206,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314620",
    "pull_request_review_id": 1838846083,
    "id": 1463314620,
    "node_id": "PRRC_kwDOABII585XOGi8",
    "diff_hunk": "@@ -734,6 +735,23 @@ class CTxMemPool\n         return m_sequence_number;\n     }\n \n+    /**\n+     * Calculate the old and new mempool feerate diagrams relating to the\n+     * clusters that would be affected by a potential replacement transaction.\n+     *\n+     * @param[in] replacement_fees    Package fees\n+     * @param[in] replacement_vsize   Package size\n+     * @param[in] direct_conflicts    All transactions that would be removed directly (not via descendants)",
    "path": "src/txmempool.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "tried my own explanation",
    "created_at": "2024-01-23T13:51:47Z",
    "updated_at": "2024-01-23T13:51:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314620",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314620"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314620"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 744,
    "side": "RIGHT",
    "in_reply_to_id": 1462412782,
    "original_position": 18,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314778",
    "pull_request_review_id": 1838846344,
    "id": 1463314778,
    "node_id": "PRRC_kwDOABII585XOGla",
    "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of all_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // OLD: Compute existing chunks from all affected clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), static_cast<int32_t>(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2024-01-23T13:51:54Z",
    "updated_at": "2024-01-23T13:51:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314778",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314778"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314778"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314778/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1335,
    "side": "RIGHT",
    "in_reply_to_id": 1462385881,
    "original_position": 95,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315597",
    "pull_request_review_id": 1838847715,
    "id": 1463315597,
    "node_id": "PRRC_kwDOABII585XOGyN",
    "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "taken",
    "created_at": "2024-01-23T13:52:33Z",
    "updated_at": "2024-01-23T13:52:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463315597",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315597"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463315597"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1271,
    "side": "RIGHT",
    "in_reply_to_id": 1462350586,
    "original_position": 31,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315777",
    "pull_request_review_id": 1838847976,
    "id": 1463315777,
    "node_id": "PRRC_kwDOABII585XOG1B",
    "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2024-01-23T13:52:40Z",
    "updated_at": "2024-01-23T13:52:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463315777",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315777"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463315777"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1274,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1264,
    "side": "RIGHT",
    "in_reply_to_id": 1462348934,
    "original_position": 35,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463859645",
    "pull_request_review_id": 1839710319,
    "id": 1463859645,
    "node_id": "PRRC_kwDOABII585XQLm9",
    "diff_hunk": "@@ -19,6 +19,8 @@\n #include <limits>\n #include <vector>\n \n+#include <compare>",
    "path": "src/policy/rbf.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, that would improve it",
    "created_at": "2024-01-23T19:05:54Z",
    "updated_at": "2024-01-23T19:05:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463859645",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463859645"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463859645"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463859645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 22,
    "original_line": 22,
    "side": "RIGHT",
    "in_reply_to_id": 1462332681,
    "original_position": 4,
    "position": 4,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463863198",
    "pull_request_review_id": 1839716607,
    "id": 1463863198,
    "node_id": "PRRC_kwDOABII585XQMee",
    "diff_hunk": "@@ -734,6 +735,24 @@ class CTxMemPool\n         return m_sequence_number;\n     }\n \n+    /**\n+     * Calculate the old and new mempool feerate diagrams relating to the\n+     * clusters that would be affected by a potential replacement transaction.\n+     *\n+     * @param[in] replacement_fees    Package fees\n+     * @param[in] replacement_vsize   Package size\n+     * @param[in] direct_conflicts    All transactions that would be removed directly by\n+     *                                having a conflicting input wih a proposed transaction",
    "path": "src/txmempool.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n     *                                having a conflicting input with a proposed transaction\r\n```",
    "created_at": "2024-01-23T19:09:34Z",
    "updated_at": "2024-01-23T19:14:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463863198",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463863198"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463863198"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463863198/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 745,
    "side": "RIGHT",
    "original_position": 19,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463866212",
    "pull_request_review_id": 1839716607,
    "id": 1463866212,
    "node_id": "PRRC_kwDOABII585XQNNk",
    "diff_hunk": "@@ -217,15 +232,154 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(::cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+\n+    const CAmount low_fee{CENT/100};\n+    const CAmount normal_fee{CENT/10};\n+\n+    // One low feerate txn followed be normal feerate\n+    const auto tx1 = make_tx(/*inputs=*/ {m_coinbase_txns[0]}, /*output_values=*/ {10 * COIN});\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(tx1));\n+    const auto tx2 = make_tx(/*inputs=*/ {tx1}, /*output_values=*/ {995 * CENT});\n+    pool.addUnchecked(entry.Fee(normal_fee).FromTx(tx2));\n+\n+    const auto entry1 = pool.GetIter(tx1->GetHash()).value();\n+    const auto tx1_fee = entry1->GetModifiedFee();\n+    const auto tx1_size = entry1->GetTxSize();\n+    const auto entry2 = pool.GetIter(tx2->GetHash()).value();\n+    const auto tx2_fee = entry2->GetModifiedFee();\n+    const auto tx2_size = entry2->GetTxSize();\n+\n+    // Now test ImprovesFeerateDiagram with various levels of \"package rbf\" feerates\n+\n+    // It doesn't improve itself\n+    const auto res1 = ImprovesFeerateDiagram(pool, {entry1}, {entry1, entry2}, tx1_fee + tx2_fee, tx1_size + tx2_size);\n+    BOOST_CHECK(res1.has_value());\n+    BOOST_CHECK(res1.value().first == DiagramCheckError::FAILURE);\n+    BOOST_CHECK(res1.value().second == \"insufficient feerate: does not improve feerate diagram\");\n+\n+    // With one more satoshi it does\n+    BOOST_CHECK(ImprovesFeerateDiagram(pool, {entry1}, {entry1, entry2}, tx1_fee + tx2_fee + 1, tx1_size + tx2_size) == std::nullopt);\n+\n+    // Make conflict un-calculable(for now)\n+    const auto tx3 = make_tx(/*inputs=*/ {tx2}, /*output_values=*/ {995 * CENT});\n+    pool.addUnchecked(entry.Fee(normal_fee).FromTx(tx3));\n+    const auto res3 = ImprovesFeerateDiagram(pool, {entry1}, {entry1, entry2}, tx1_fee + tx2_fee + 1, tx1_size + tx2_size);\n+    BOOST_CHECK(res3.has_value());\n+    BOOST_CHECK(res3.value().first == DiagramCheckError::UNCALCULABLE);\n+    BOOST_CHECK(res3.value().second == strprintf(\"%s has 2 descendants, max 1 allowed\", tx1->GetHash().GetHex()));\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/murchandamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If all diagrams always start with `FeeFrac{0, 0}`, why do we need to mention that as a first element?",
    "created_at": "2024-01-23T19:12:38Z",
    "updated_at": "2024-01-23T19:14:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463866212",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463866212"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463866212"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463866212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 508,
    "original_start_line": 327,
    "start_side": "RIGHT",
    "line": 509,
    "original_line": 509,
    "side": "RIGHT",
    "original_position": 238,
    "position": 418,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466391538",
    "pull_request_review_id": 1843766331,
    "id": 1466391538,
    "node_id": "PRRC_kwDOABII585XZ1vy",
    "diff_hunk": "@@ -734,6 +735,24 @@ class CTxMemPool\n         return m_sequence_number;\n     }\n \n+    /**\n+     * Calculate the old and new mempool feerate diagrams relating to the\n+     * clusters that would be affected by a potential replacement transaction.\n+     *\n+     * @param[in] replacement_fees    Package fees\n+     * @param[in] replacement_vsize   Package size\n+     * @param[in] direct_conflicts    All transactions that would be removed directly by\n+     *                                having a conflicting input wih a proposed transaction",
    "path": "src/txmempool.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2024-01-25T13:37:24Z",
    "updated_at": "2024-01-25T13:37:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1466391538",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466391538"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1466391538"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466391538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 745,
    "side": "RIGHT",
    "in_reply_to_id": 1463863198,
    "original_position": 19,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466392222",
    "pull_request_review_id": 1843767479,
    "id": 1466392222,
    "node_id": "PRRC_kwDOABII585XZ16e",
    "diff_hunk": "@@ -217,15 +232,154 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(::cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+\n+    const CAmount low_fee{CENT/100};\n+    const CAmount normal_fee{CENT/10};\n+\n+    // One low feerate txn followed be normal feerate\n+    const auto tx1 = make_tx(/*inputs=*/ {m_coinbase_txns[0]}, /*output_values=*/ {10 * COIN});\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(tx1));\n+    const auto tx2 = make_tx(/*inputs=*/ {tx1}, /*output_values=*/ {995 * CENT});\n+    pool.addUnchecked(entry.Fee(normal_fee).FromTx(tx2));\n+\n+    const auto entry1 = pool.GetIter(tx1->GetHash()).value();\n+    const auto tx1_fee = entry1->GetModifiedFee();\n+    const auto tx1_size = entry1->GetTxSize();\n+    const auto entry2 = pool.GetIter(tx2->GetHash()).value();\n+    const auto tx2_fee = entry2->GetModifiedFee();\n+    const auto tx2_size = entry2->GetTxSize();\n+\n+    // Now test ImprovesFeerateDiagram with various levels of \"package rbf\" feerates\n+\n+    // It doesn't improve itself\n+    const auto res1 = ImprovesFeerateDiagram(pool, {entry1}, {entry1, entry2}, tx1_fee + tx2_fee, tx1_size + tx2_size);\n+    BOOST_CHECK(res1.has_value());\n+    BOOST_CHECK(res1.value().first == DiagramCheckError::FAILURE);\n+    BOOST_CHECK(res1.value().second == \"insufficient feerate: does not improve feerate diagram\");\n+\n+    // With one more satoshi it does\n+    BOOST_CHECK(ImprovesFeerateDiagram(pool, {entry1}, {entry1, entry2}, tx1_fee + tx2_fee + 1, tx1_size + tx2_size) == std::nullopt);\n+\n+    // Make conflict un-calculable(for now)\n+    const auto tx3 = make_tx(/*inputs=*/ {tx2}, /*output_values=*/ {995 * CENT});\n+    pool.addUnchecked(entry.Fee(normal_fee).FromTx(tx3));\n+    const auto res3 = ImprovesFeerateDiagram(pool, {entry1}, {entry1, entry2}, tx1_fee + tx2_fee + 1, tx1_size + tx2_size);\n+    BOOST_CHECK(res3.has_value());\n+    BOOST_CHECK(res3.value().first == DiagramCheckError::UNCALCULABLE);\n+    BOOST_CHECK(res3.value().second == strprintf(\"%s has 2 descendants, max 1 allowed\", tx1->GetHash().GetHex()));\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'll leave this as an ergonomics issue for later debate",
    "created_at": "2024-01-25T13:37:59Z",
    "updated_at": "2024-01-25T13:38:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1466392222",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466392222"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1466392222"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466392222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 508,
    "original_start_line": 327,
    "start_side": "RIGHT",
    "line": 509,
    "original_line": 509,
    "side": "RIGHT",
    "in_reply_to_id": 1463866212,
    "original_position": 238,
    "position": 418,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1469871777",
    "pull_request_review_id": 1849127187,
    "id": 1469871777,
    "node_id": "PRRC_kwDOABII585XnHah",
    "diff_hunk": "@@ -0,0 +1,164 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "c5e63487c52835645c5cda9779500a000c3a023c",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    int64_t fee;\r\n    int32_t size;\r\n```\r\n\r\nShould their be more information that will describe the transaction size and fee, base / modified fee, vsize in bytes or something of that sort.\r\nIf not I think its okay like this.\r\n\r\n---\r\nUnrelated just asking to learn.\r\nWhy are'nt we using `CAmount` here for the fee?\r\n\r\nIn some places I see transaction size as `uint32_t` while some places its `int32_t`.\r\n\r\nShould we have a type for size just like `CAmount`?",
    "created_at": "2024-01-29T16:37:19Z",
    "updated_at": "2024-01-29T21:18:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1469871777",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1469871777"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1469871777"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1469871777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 63,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 64,
    "side": "RIGHT",
    "original_position": 66,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486385523",
    "pull_request_review_id": 1875569689,
    "id": 1486385523,
    "node_id": "PRRC_kwDOABII585YmHFz",
    "diff_hunk": "@@ -0,0 +1,164 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "c5e63487c52835645c5cda9779500a000c3a023c",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> If not I think its okay like this.\r\n\r\nremoved comments, how it's precisely used is an implementation detail outside of this code",
    "created_at": "2024-02-12T15:54:53Z",
    "updated_at": "2024-02-12T15:54:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1486385523",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486385523"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1486385523"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1486385523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 63,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 64,
    "side": "RIGHT",
    "in_reply_to_id": 1469871777,
    "original_position": 66,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488282848",
    "pull_request_review_id": 1878540108,
    "id": 1488282848,
    "node_id": "PRRC_kwDOABII585YtWTg",
    "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In implementation they are sorted in increasing fee rate and the  chunks in the comments should be ordered  as is? and also the 0 fee and size chucks sorts first. \r\n```suggestion\r\n * by decreasing size. The empty FeeFrac (fee and size both 0) sorts first. So for example, the\r\n * following FeeFracs are in sorted order:\r\n *\r\n * - fee=0 size=0 (undefined feerate)\r\n * - fee=2 size=1 (feerate 2)\r\n * - fee=3 size=2 (feerate 1.5)\r\n * - fee=1 size=1 (feerate 1)\r\n * - fee=2 size=2 (feerate 1)\r\n * - fee=2 size=3 (feerate 0.667...)\r\n * - fee=1 size=2 (feerate 0.5)\r\n * - fee=0 size=1 (feerate 0)\r\n```",
    "created_at": "2024-02-13T17:16:44Z",
    "updated_at": "2024-02-13T17:35:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1488282848",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488282848"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1488282848"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488282848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 19,
    "original_start_line": 19,
    "start_side": "RIGHT",
    "line": 30,
    "original_line": 30,
    "side": "RIGHT",
    "original_position": 30,
    "position": 30,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488285682",
    "pull_request_review_id": 1878540108,
    "id": 1488285682,
    "node_id": "PRRC_kwDOABII585YtW_y",
    "diff_hunk": "@@ -1235,3 +1236,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant, exceeding cluster limit of 2\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a child,  we are its only parent.\n+        // If we have a parent, we are its only child.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "802a104d0e2f810d97567e161e0cf61331052906",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe add unit test for `CalculateFeerateDiagramsForRBF` also?",
    "created_at": "2024-02-13T17:18:40Z",
    "updated_at": "2024-02-13T17:34:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1488285682",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488285682"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1488285682"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488285682/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1283,
    "side": "RIGHT",
    "original_position": 53,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488290016",
    "pull_request_review_id": 1878540108,
    "id": 1488290016,
    "node_id": "PRRC_kwDOABII585YtYDg",
    "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint64_t accum{0};\n+        for (int i = 0; i + pos < 4; ++i) {\n+            // Add current value at limb pos in ret.\n+            accum += ret[3 - pos - i];\n+            // Add low or high half of v.\n+            if (i == 0) accum += v & 0xffffffff;\n+            if (i == 1) accum += v >> 32;\n+            // Store lower half of result in limb pos in ret.\n+            ret[3 - pos - i] = accum & 0xffffffff;\n+            // Leave carry in accum.\n+            accum >>= 32;\n+        }\n+        // Make sure no overflow.\n+        assert(accum == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^32).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::array */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] != b[i]) return a[i] <=> b[i];\n+    }\n+    return std::strong_ordering::equal;\n+}\n+\n+std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n+{\n+    // Compute and compare signs.\n+    int sign_a = (a1 == 0 ? 0 : a1 < 0 ? -1 : 1) * (a2 == 0 ? 0 : a2 < 0 ? -1 : 1);\n+    int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n+    if (sign_a != sign_b) return sign_a <=> sign_b;\n+\n+    // Compute absolute values.\n+    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n+    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n+    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n+    // intentional here.\n+    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n+    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n+    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n+    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+\n+    // Compute products of absolute values.\n+    auto mul_abs_a = Mul128(abs_a1, abs_a2);\n+    auto mul_abs_b = Mul128(abs_b1, abs_b2);\n+    if (sign_a < 0) {\n+        return compare_arrays(mul_abs_b, mul_abs_a);\n+    } else {\n+        return compare_arrays(mul_abs_a, mul_abs_b);\n+    }\n+}\n+\n+} // namespace\n+\n+FUZZ_TARGET(feefrac)\n+{\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+\n+    int64_t f1 = provider.ConsumeIntegral<int64_t>();\n+    //int64_t f1 = provider.ConsumeIntegralInRange(std::numeric_limits<int64_t>::min() + 1,\n+    //                            std::numeric_limits<int64_t>::max() - 1);\n+    int32_t s1 = provider.ConsumeIntegral<int32_t>();\n+    if (s1 == 0) f1 = 0;\n+    FeeFrac fr1(f1, s1);\n+    assert(fr1.IsEmpty() == (s1 == 0));\n+\n+    int64_t f2 = provider.ConsumeIntegral<int64_t>();\n+    //int64_t f2 = provider.ConsumeIntegralInRange(std::numeric_limits<int64_t>::min() + 1,\n+    //                            std::numeric_limits<int64_t>::max() - 1);",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ff96f3a7a690d60e50fa49014ea895df348faad4",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why not delete the commented version of f1 and f2.\r\n```suggestion\r\n    int32_t s1 = provider.ConsumeIntegral<int32_t>();\r\n    if (s1 == 0) f1 = 0;\r\n    FeeFrac fr1(f1, s1);\r\n    assert(fr1.IsEmpty() == (s1 == 0));\r\n\r\n    int64_t f2 = provider.ConsumeIntegral<int64_t>();\r\n      \r\n```",
    "created_at": "2024-02-13T17:21:35Z",
    "updated_at": "2024-02-13T17:35:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1488290016",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488290016"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1488290016"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488290016/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 89,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 98,
    "side": "RIGHT",
    "original_position": 98,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1489790971",
    "pull_request_review_id": 1880803374,
    "id": 1489790971,
    "node_id": "PRRC_kwDOABII585YzGf7",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> If `old`, `new`, and `tail` are CFeeFrac objects, this condition is exactly `!((new - old) << tail)`. If new is smaller than old, the `new - old` object has negative size.\r\n\r\n@sipa With the various `Assume()` calls that check that if the size is 0, the fee must also be zero, doesn't that mean that we can't really write code like this example you gave?  Unless we checked that new != old first -- otherwise you might create a FeeFrac with 0 size and non-zero fee.\r\n",
    "created_at": "2024-02-14T16:54:49Z",
    "updated_at": "2024-02-14T16:54:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1489790971",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1489790971"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1489790971"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1489790971/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 1453502118,
    "original_position": 16,
    "position": 16,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1490043524",
    "pull_request_review_id": 1881279355,
    "id": 1490043524,
    "node_id": "PRRC_kwDOABII585Y0EKE",
    "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't understand your comment, sorry. They're listed in increasing feerate, with decreasing size as a tie breaker.",
    "created_at": "2024-02-14T20:44:55Z",
    "updated_at": "2024-02-14T20:44:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1490043524",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1490043524"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1490043524"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1490043524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 19,
    "original_start_line": 19,
    "start_side": "RIGHT",
    "line": 30,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 1488282848,
    "original_position": 30,
    "position": 30,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491039911",
    "pull_request_review_id": 1882814496,
    "id": 1491039911,
    "node_id": "PRRC_kwDOABII585Y33an",
    "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes but in reverse I think.\r\nSuppose to be the other way around no?\r\n\r\nA sorted `FeeFracs`  should have undefined chunks first, the highest fee rate chunk second continuously...\r\nIf their is a tie, the chunk with lower size comes first.\r\nHence the are sorted in increasing fee rates, and then by decreasing size.\r\n\r\nI've added test to verify this here https://github.com/ismaelsadeeq/bitcoin/commit/8ce89b132f4304a7feda067a88fd0a72330044a6, this test passed on this branch.",
    "created_at": "2024-02-15T13:50:37Z",
    "updated_at": "2024-02-15T13:50:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491039911",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491039911"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491039911"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491039911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 19,
    "original_start_line": 19,
    "start_side": "RIGHT",
    "line": 30,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 1488282848,
    "original_position": 30,
    "position": 30,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491046223",
    "pull_request_review_id": 1882829496,
    "id": 1491046223,
    "node_id": "PRRC_kwDOABII585Y349P",
    "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@ismaelsadeeq The comparator you provide to `std::sort` is supposed to return whether the first argument should sort *before* the second one (if no comparator is provided, `operator<` is used). With that, you should see lowest feerate first, highest feerate last, and the undefined feefrac at the very end. Within equal-feerate groups, larger size comes first.",
    "created_at": "2024-02-15T13:55:11Z",
    "updated_at": "2024-02-15T13:55:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491046223",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491046223"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491046223"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491046223/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 19,
    "original_start_line": 19,
    "start_side": "RIGHT",
    "line": 30,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 1488282848,
    "original_position": 30,
    "position": 30,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491054596",
    "pull_request_review_id": 1882850491,
    "id": 1491054596,
    "node_id": "PRRC_kwDOABII585Y37AE",
    "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes thanks for clarification 👍🏾 ",
    "created_at": "2024-02-15T14:00:43Z",
    "updated_at": "2024-02-15T14:00:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491054596",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491054596"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491054596"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491054596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 19,
    "original_start_line": 19,
    "start_side": "RIGHT",
    "line": 30,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 1488282848,
    "original_position": 30,
    "position": 30,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491060699",
    "pull_request_review_id": 1882865782,
    "id": 1491060699,
    "node_id": "PRRC_kwDOABII585Y38fb",
    "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I looked at it the other way around, using the result from `BuildDiagramFromUnsortedChunks` sort which  uses custom > operator @instagibbs.",
    "created_at": "2024-02-15T14:05:11Z",
    "updated_at": "2024-02-15T14:05:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491060699",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491060699"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491060699"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491060699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 19,
    "original_start_line": 19,
    "start_side": "RIGHT",
    "line": 30,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 1488282848,
    "original_position": 30,
    "position": 30,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491090655",
    "pull_request_review_id": 1882920075,
    "id": 1491090655,
    "node_id": "PRRC_kwDOABII585Y4Dzf",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@sdaftuar Indeed. It wouldn't require anything more than dropping those `Assume()` calls, but right now FeeFrac objects represent (the aggregate fee and size of) sets of transactions, rather differences between such aggregates (as would be needed for this use case).",
    "created_at": "2024-02-15T14:25:20Z",
    "updated_at": "2024-02-15T14:25:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491090655",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491090655"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491090655"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491090655/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 1453502118,
    "original_position": 16,
    "position": 16,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491329059",
    "pull_request_review_id": 1883351956,
    "id": 1491329059,
    "node_id": "PRRC_kwDOABII585Y4-Aj",
    "diff_hunk": "@@ -1235,3 +1236,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant, exceeding cluster limit of 2\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a child,  we are its only parent.\n+        // If we have a parent, we are its only child.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)",
    "path": "src/txmempool.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "802a104d0e2f810d97567e161e0cf61331052906",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "good point; added",
    "created_at": "2024-02-15T16:52:44Z",
    "updated_at": "2024-02-15T16:52:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491329059",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491329059"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491329059"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491329059/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1283,
    "side": "RIGHT",
    "in_reply_to_id": 1488285682,
    "original_position": 53,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491329325",
    "pull_request_review_id": 1883352369,
    "id": 1491329325,
    "node_id": "PRRC_kwDOABII585Y4-Et",
    "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint64_t accum{0};\n+        for (int i = 0; i + pos < 4; ++i) {\n+            // Add current value at limb pos in ret.\n+            accum += ret[3 - pos - i];\n+            // Add low or high half of v.\n+            if (i == 0) accum += v & 0xffffffff;\n+            if (i == 1) accum += v >> 32;\n+            // Store lower half of result in limb pos in ret.\n+            ret[3 - pos - i] = accum & 0xffffffff;\n+            // Leave carry in accum.\n+            accum >>= 32;\n+        }\n+        // Make sure no overflow.\n+        assert(accum == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^32).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::array */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] != b[i]) return a[i] <=> b[i];\n+    }\n+    return std::strong_ordering::equal;\n+}\n+\n+std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n+{\n+    // Compute and compare signs.\n+    int sign_a = (a1 == 0 ? 0 : a1 < 0 ? -1 : 1) * (a2 == 0 ? 0 : a2 < 0 ? -1 : 1);\n+    int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n+    if (sign_a != sign_b) return sign_a <=> sign_b;\n+\n+    // Compute absolute values.\n+    uint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\n+    uint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\n+    // Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\n+    // intentional here.\n+    if (a1 < 0) abs_a1 = ~abs_a1 + 1;\n+    if (a2 < 0) abs_a2 = ~abs_a2 + 1;\n+    if (b1 < 0) abs_b1 = ~abs_b1 + 1;\n+    if (b2 < 0) abs_b2 = ~abs_b2 + 1;\n+\n+    // Compute products of absolute values.\n+    auto mul_abs_a = Mul128(abs_a1, abs_a2);\n+    auto mul_abs_b = Mul128(abs_b1, abs_b2);\n+    if (sign_a < 0) {\n+        return compare_arrays(mul_abs_b, mul_abs_a);\n+    } else {\n+        return compare_arrays(mul_abs_a, mul_abs_b);\n+    }\n+}\n+\n+} // namespace\n+\n+FUZZ_TARGET(feefrac)\n+{\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+\n+    int64_t f1 = provider.ConsumeIntegral<int64_t>();\n+    //int64_t f1 = provider.ConsumeIntegralInRange(std::numeric_limits<int64_t>::min() + 1,\n+    //                            std::numeric_limits<int64_t>::max() - 1);\n+    int32_t s1 = provider.ConsumeIntegral<int32_t>();\n+    if (s1 == 0) f1 = 0;\n+    FeeFrac fr1(f1, s1);\n+    assert(fr1.IsEmpty() == (s1 == 0));\n+\n+    int64_t f2 = provider.ConsumeIntegral<int64_t>();\n+    //int64_t f2 = provider.ConsumeIntegralInRange(std::numeric_limits<int64_t>::min() + 1,\n+    //                            std::numeric_limits<int64_t>::max() - 1);",
    "path": "src/test/fuzz/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "ff96f3a7a690d60e50fa49014ea895df348faad4",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "mistakenly left at some point; removed",
    "created_at": "2024-02-15T16:52:56Z",
    "updated_at": "2024-02-15T16:52:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491329325",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491329325"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491329325"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491329325/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 89,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 98,
    "side": "RIGHT",
    "in_reply_to_id": 1488290016,
    "original_position": 98,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491330674",
    "pull_request_review_id": 1883354202,
    "id": 1491330674,
    "node_id": "PRRC_kwDOABII585Y4-Zy",
    "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I added some additional feefrac fuzzing for the +/- operations, marking as resolved",
    "created_at": "2024-02-15T16:53:49Z",
    "updated_at": "2024-02-15T16:53:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491330674",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491330674"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1491330674"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491330674/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 19,
    "original_start_line": 19,
    "start_side": "RIGHT",
    "line": 30,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 1488282848,
    "original_position": 30,
    "position": 30,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1492766771",
    "pull_request_review_id": 1885627769,
    "id": 1492766771,
    "node_id": "PRRC_kwDOABII585Y-dAz",
    "diff_hunk": "@@ -309,6 +309,128 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     BOOST_CHECK(res3.has_value());\n     BOOST_CHECK(res3.value().first == DiagramCheckError::UNCALCULABLE);\n     BOOST_CHECK(res3.value().second == strprintf(\"%s has 2 descendants, max 1 allowed\", tx1->GetHash().GetHex()));\n+\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(::cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+\n+    const CAmount low_fee{CENT/100};\n+    const CAmount normal_fee{CENT/10};\n+    const CAmount high_fee{CENT};\n+\n+    // low -> high -> medium fee transactions that would result in two chunks together\n+    const auto low_tx= make_tx(/*inputs=*/ {m_coinbase_txns[0]}, /*output_values=*/ {10 * COIN});\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(low_tx));\n+\n+    const auto entry_low = pool.GetIter(low_tx->GetHash()).value();\n+    const auto low_size = entry_low->GetTxSize();\n+\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    // Replacement of size 1\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/0, /*replacement_vsize=*/1, {entry_low}, {entry_low}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string.has_value());\n+    BOOST_CHECK(old_diagram.size() == 2);\n+    BOOST_CHECK(new_diagram.size() == 2);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(low_fee, low_size));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(0, 1));\n+    old_diagram.clear();\n+    new_diagram.clear();\n+\n+    // No replacement fees makes new empty diagram of length 2\n+    const auto err_string2{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/0, /*replacement_vsize=*/0, {entry_low}, {entry_low}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string2.has_value());\n+    BOOST_CHECK(old_diagram.size() == 2);\n+    BOOST_CHECK(new_diagram.size() == 2);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(low_fee, low_size));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(0, 0));",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d57fbda350ee9051931d9a0dad4beb55f6b2e574",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "this is odd, should we just `Assume()` `replacement_vsize>0` in `CalculateFeerateDiagramsForRBF`?",
    "created_at": "2024-02-16T17:14:29Z",
    "updated_at": "2024-02-16T17:14:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1492766771",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1492766771"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1492766771"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1492766771/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 354,
    "side": "RIGHT",
    "original_position": 46,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1492915210",
    "pull_request_review_id": 1885883009,
    "id": 1492915210,
    "node_id": "PRRC_kwDOABII585Y_BQK",
    "diff_hunk": "@@ -309,6 +309,128 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     BOOST_CHECK(res3.has_value());\n     BOOST_CHECK(res3.value().first == DiagramCheckError::UNCALCULABLE);\n     BOOST_CHECK(res3.value().second == strprintf(\"%s has 2 descendants, max 1 allowed\", tx1->GetHash().GetHex()));\n+\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(::cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+\n+    const CAmount low_fee{CENT/100};\n+    const CAmount normal_fee{CENT/10};\n+    const CAmount high_fee{CENT};\n+\n+    // low -> high -> medium fee transactions that would result in two chunks together\n+    const auto low_tx= make_tx(/*inputs=*/ {m_coinbase_txns[0]}, /*output_values=*/ {10 * COIN});\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(low_tx));\n+\n+    const auto entry_low = pool.GetIter(low_tx->GetHash()).value();\n+    const auto low_size = entry_low->GetTxSize();\n+\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    // Replacement of size 1\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/0, /*replacement_vsize=*/1, {entry_low}, {entry_low}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string.has_value());\n+    BOOST_CHECK(old_diagram.size() == 2);\n+    BOOST_CHECK(new_diagram.size() == 2);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(low_fee, low_size));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(0, 1));\n+    old_diagram.clear();\n+    new_diagram.clear();\n+\n+    // No replacement fees makes new empty diagram of length 2\n+    const auto err_string2{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/0, /*replacement_vsize=*/0, {entry_low}, {entry_low}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string2.has_value());\n+    BOOST_CHECK(old_diagram.size() == 2);\n+    BOOST_CHECK(new_diagram.size() == 2);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(low_fee, low_size));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(0, 0));",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d57fbda350ee9051931d9a0dad4beb55f6b2e574",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, I can't think of a scenario where that will happen!",
    "created_at": "2024-02-16T19:41:22Z",
    "updated_at": "2024-02-16T19:41:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1492915210",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1492915210"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1492915210"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1492915210/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 354,
    "side": "RIGHT",
    "in_reply_to_id": 1492766771,
    "original_position": 46,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1492915977",
    "pull_request_review_id": 1885884419,
    "id": 1492915977,
    "node_id": "PRRC_kwDOABII585Y_BcJ",
    "diff_hunk": "@@ -309,6 +309,128 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     BOOST_CHECK(res3.has_value());\n     BOOST_CHECK(res3.value().first == DiagramCheckError::UNCALCULABLE);\n     BOOST_CHECK(res3.value().second == strprintf(\"%s has 2 descendants, max 1 allowed\", tx1->GetHash().GetHex()));\n+\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(::cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+\n+    const CAmount low_fee{CENT/100};\n+    const CAmount normal_fee{CENT/10};\n+    const CAmount high_fee{CENT};\n+\n+    // low -> high -> medium fee transactions that would result in two chunks together\n+    const auto low_tx= make_tx(/*inputs=*/ {m_coinbase_txns[0]}, /*output_values=*/ {10 * COIN});",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d57fbda350ee9051931d9a0dad4beb55f6b2e574",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit:\r\n```suggestion\r\n    const auto low_tx = make_tx(/*inputs=*/ {m_coinbase_txns[0]}, /*output_values=*/ {10 * COIN});\r\n```",
    "created_at": "2024-02-16T19:42:15Z",
    "updated_at": "2024-02-16T19:42:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1492915977",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1492915977"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1492915977"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1492915977/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 326,
    "side": "RIGHT",
    "original_position": 18,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493302062",
    "pull_request_review_id": 1886533962,
    "id": 1493302062,
    "node_id": "PRRC_kwDOABII585ZAfsu",
    "diff_hunk": "@@ -309,6 +309,128 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     BOOST_CHECK(res3.has_value());\n     BOOST_CHECK(res3.value().first == DiagramCheckError::UNCALCULABLE);\n     BOOST_CHECK(res3.value().second == strprintf(\"%s has 2 descendants, max 1 allowed\", tx1->GetHash().GetHex()));\n+\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(::cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+\n+    const CAmount low_fee{CENT/100};\n+    const CAmount normal_fee{CENT/10};\n+    const CAmount high_fee{CENT};\n+\n+    // low -> high -> medium fee transactions that would result in two chunks together\n+    const auto low_tx= make_tx(/*inputs=*/ {m_coinbase_txns[0]}, /*output_values=*/ {10 * COIN});\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(low_tx));\n+\n+    const auto entry_low = pool.GetIter(low_tx->GetHash()).value();\n+    const auto low_size = entry_low->GetTxSize();\n+\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    // Replacement of size 1\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/0, /*replacement_vsize=*/1, {entry_low}, {entry_low}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string.has_value());\n+    BOOST_CHECK(old_diagram.size() == 2);\n+    BOOST_CHECK(new_diagram.size() == 2);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(low_fee, low_size));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(0, 1));\n+    old_diagram.clear();\n+    new_diagram.clear();\n+\n+    // No replacement fees makes new empty diagram of length 2\n+    const auto err_string2{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/0, /*replacement_vsize=*/0, {entry_low}, {entry_low}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string2.has_value());\n+    BOOST_CHECK(old_diagram.size() == 2);\n+    BOOST_CHECK(new_diagram.size() == 2);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(low_fee, low_size));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(0, 0));\n+    old_diagram.clear();\n+    new_diagram.clear();\n+\n+    // Non-zero replacement fee/size\n+    const auto err_string3{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/high_fee, /*replacement_vsize=*/low_size, {entry_low}, {entry_low}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string3.has_value());\n+    BOOST_CHECK(old_diagram.size() == 2);\n+    BOOST_CHECK(new_diagram.size() == 2);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(low_fee, low_size));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(high_fee, low_size));\n+    old_diagram.clear();\n+    new_diagram.clear();\n+\n+    // Add a second transaction to the cluster that will make a single chunk, to be evicted in the RBF\n+    const auto high_tx = make_tx(/*inputs=*/ {low_tx}, /*output_values=*/ {995 * CENT});\n+    pool.addUnchecked(entry.Fee(high_fee).FromTx(high_tx));\n+    const auto entry_high = pool.GetIter(high_tx->GetHash()).value();\n+    const auto high_size = entry_high->GetTxSize();\n+\n+    const auto err_string4{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/high_fee, /*replacement_vsize=*/low_size, {entry_low}, {entry_low, entry_high}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string4.has_value());\n+    BOOST_CHECK(old_diagram.size() == 2);\n+    BOOST_CHECK(new_diagram.size() == 2);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(low_fee + high_fee, low_size + high_size));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(high_fee, low_size));\n+    old_diagram.clear();\n+    new_diagram.clear();\n+\n+    // Conflict with the 2nd tx, resulting in new diagram with three entries\n+    const auto err_string5{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/high_fee, /*replacement_vsize=*/low_size, {entry_high}, {entry_high}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string5.has_value());\n+    BOOST_CHECK(old_diagram.size() == 2);\n+    BOOST_CHECK(new_diagram.size() == 3);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(low_fee + high_fee, low_size + high_size));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(high_fee, low_size));\n+    BOOST_CHECK(new_diagram[2] == FeeFrac(low_fee + high_fee, low_size + low_size));\n+    old_diagram.clear();\n+    new_diagram.clear();\n+\n+    // third transaction causes the topology check to fail\n+    const auto normal_tx = make_tx(/*inputs=*/ {high_tx}, /*output_values=*/ {995 * CENT});\n+    pool.addUnchecked(entry.Fee(normal_fee).FromTx(normal_tx));\n+    const auto entry_normal = pool.GetIter(normal_tx->GetHash()).value();\n+    const auto normal_size = entry_normal->GetTxSize();\n+\n+    const auto err_string6{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/normal_fee, /*replacement_vsize=*/normal_size, {entry_low}, {entry_low, entry_high, entry_normal}, old_diagram, new_diagram)};\n+    BOOST_CHECK(err_string6.has_value());\n+    BOOST_CHECK(err_string6.value() == strprintf(\"%s has 2 descendants, max 1 allowed\", low_tx->GetHash().GetHex()));\n+    BOOST_CHECK(old_diagram.empty());\n+    BOOST_CHECK(new_diagram.empty());\n+\n+    // Make a size 2 cluster that is itself two chunks; evict both txns\n+    const auto high_tx_2= make_tx(/*inputs=*/ {m_coinbase_txns[1]}, /*output_values=*/ {10 * COIN});\n+    pool.addUnchecked(entry.Fee(high_fee).FromTx(high_tx_2));\n+    const auto entry_high_2 = pool.GetIter(high_tx_2->GetHash()).value();\n+    const auto high_size_2 = entry_high_2->GetTxSize();\n+\n+    const auto low_tx_2 = make_tx(/*inputs=*/ {high_tx_2}, /*output_values=*/ {9 * COIN});\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(low_tx_2));\n+    const auto entry_low_2 = pool.GetIter(low_tx_2->GetHash()).value();\n+    const auto low_size_2 = entry_low_2->GetTxSize();\n+\n+    const auto err_string7{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/high_fee, /*replacement_vsize=*/low_size, {entry_high_2}, {entry_high_2, entry_low_2}, old_diagram, new_diagram)};\n+    BOOST_CHECK(!err_string5.has_value());\n+    BOOST_CHECK(old_diagram.size() == 3);\n+    BOOST_CHECK(new_diagram.size() == 2);\n+    BOOST_CHECK(old_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(old_diagram[1] == FeeFrac(high_fee, high_size_2));\n+    BOOST_CHECK(old_diagram[2] == FeeFrac(low_fee + high_fee, low_size_2 + high_size_2));\n+    BOOST_CHECK(new_diagram[0] == FeeFrac(0, 0));\n+    BOOST_CHECK(new_diagram[1] == FeeFrac(high_fee, low_size_2));\n+    old_diagram.clear();\n+    new_diagram.clear();\n }",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d57fbda350ee9051931d9a0dad4beb55f6b2e574",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe weshould also check that we can have more than two directly conflicting transactions as long as they are all in a cluster size <=2.\r\n\r\n<details>\r\n<summary>diff </summary>\r\n\r\n```diff\r\ndiff --git a/src/test/rbf_tests.cpp b/src/test/rbf_tests.cpp\r\nindex e15fd29da3..561ebd3881 100644\r\n--- a/src/test/rbf_tests.cpp\r\n+++ b/src/test/rbf_tests.cpp\r\n@@ -431,6 +431,53 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\r\n     BOOST_CHECK(new_diagram[1] == FeeFrac(high_fee, low_size_2));\r\n     old_diagram.clear();\r\n     new_diagram.clear();\r\n+\r\n+    // You can more than two direct conflicts,  if all the directly conflicting transactions are in a cluster size < 2\r\n+    const auto conflict_1 = make_tx(/*inputs=*/ {m_coinbase_txns[2]}, /*output_values=*/ {10 * COIN});\r\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(conflict_1));\r\n+    const auto conflict_1_entry = pool.GetIter(conflict_1->GetHash()).value();\r\n+\r\n+    const auto conflict_2 = make_tx(/*inputs=*/ {m_coinbase_txns[3]}, /*output_values=*/ {10 * COIN});\r\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(conflict_2));\r\n+    const auto conflict_2_entry = pool.GetIter(conflict_2->GetHash()).value();\r\n+\r\n+    const auto conflict_3 = make_tx(/*inputs=*/ {m_coinbase_txns[4]}, /*output_values=*/ {10 * COIN});\r\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(conflict_3));\r\n+    const auto conflict_3_entry = pool.GetIter(conflict_3->GetHash()).value();\r\n+\r\n+    const auto err_string8{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/high_fee, /*replacement_vsize=*/low_size, {conflict_1_entry, conflict_2_entry, conflict_3_ent\r\nry}, {conflict_1_entry, conflict_2_entry, conflict_3_entry}, old_diagram, new_diagram)};\r\n+\r\n+    BOOST_CHECK(!err_string8.has_value());\r\n+    BOOST_CHECK(old_diagram.size() == 4);\r\n+    BOOST_CHECK(new_diagram.size() == 2);\r\n+    old_diagram.clear();\r\n+    new_diagram.clear();\r\n+\r\n+    // Add a child transaction to conflict_1 and make it cluster size 2\r\n+    const auto conflict_1_child = make_tx(/*inputs=*/{conflict_1}, /*output_values=*/ {995 * CENT});\r\n+    pool.addUnchecked(entry.Fee(low_fee).FromTx(conflict_1_child));\r\n+    const auto conflict_1_child_entry = pool.GetIter(conflict_1_child->GetHash()).value();\r\n+\r\n+    const auto err_string9{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/high_fee, /*replacement_vsize=*/low_size, {conflict_1_entry, conflict_2_entry, conflict_3_ent\r\nry}, {conflict_1_entry, conflict_2_entry, conflict_3_entry, conflict_1_child_entry}, old_diagram, new_diagram)};\r\n+\r\n+    BOOST_CHECK(!err_string8.has_value());\r\n+    BOOST_CHECK(old_diagram.size() == 4);\r\n+    BOOST_CHECK(new_diagram.size() == 2);\r\n+    old_diagram.clear();\r\n+    new_diagram.clear();\r\n+\r\n+\r\n+    // Add another descendant to conflict_1, making the cluster size > 2 should fail at this point.\r\n+    const auto conflict_1_grand_child = make_tx(/*inputs=*/{conflict_1_child}, /*output_values=*/ {995 * CENT});\r\n+    pool.addUnchecked(entry.Fee(high_fee).FromTx(conflict_1_grand_child));\r\n+    const auto conflict_1_grand_child_entry = pool.GetIter(conflict_1_child->GetHash()).value();\r\n+\r\n+    const auto err_string10{pool.CalculateFeerateDiagramsForRBF(/*replacement_fees=*/high_fee, /*replacement_vsize=*/low_size, {conflict_1_entry, conflict_2_entry, conflict_3_en\r\ntry}, {conflict_1_entry, conflict_2_entry, conflict_3_entry, conflict_1_child_entry, conflict_1_grand_child_entry}, old_diagram, new_diagram)};\r\n+\r\n+    BOOST_CHECK(err_string10.has_value());\r\n+    BOOST_CHECK(err_string10.value() == strprintf(\"%s has 2 descendants, max 1 allowed\", conflict_1->GetHash().GetHex()));\r\n+    old_diagram.clear();\r\n+    new_diagram.clear();\r\n }\r\n \r\n BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\r\n```\r\n</details>",
    "created_at": "2024-02-17T10:43:13Z",
    "updated_at": "2024-02-17T10:44:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493302062",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493302062"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493302062"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493302062/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 495,
    "original_line": 495,
    "side": "RIGHT",
    "original_position": 126,
    "position": 404,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493302276",
    "pull_request_review_id": 1886534107,
    "id": 1493302276,
    "node_id": "PRRC_kwDOABII585ZAfwE",
    "diff_hunk": "@@ -309,6 +309,128 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     BOOST_CHECK(res3.has_value());\n     BOOST_CHECK(res3.value().first == DiagramCheckError::UNCALCULABLE);\n     BOOST_CHECK(res3.value().second == strprintf(\"%s has 2 descendants, max 1 allowed\", tx1->GetHash().GetHex()));\n+\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(::cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+\n+    const CAmount low_fee{CENT/100};\n+    const CAmount normal_fee{CENT/10};\n+    const CAmount high_fee{CENT};\n+\n+    // low -> high -> medium fee transactions that would result in two chunks together\n+    const auto low_tx= make_tx(/*inputs=*/ {m_coinbase_txns[0]}, /*output_values=*/ {10 * COIN});",
    "path": "src/test/rbf_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d57fbda350ee9051931d9a0dad4beb55f6b2e574",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "here an another place below!",
    "created_at": "2024-02-17T10:44:31Z",
    "updated_at": "2024-02-17T10:46:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493302276",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493302276"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493302276"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493302276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 326,
    "side": "RIGHT",
    "in_reply_to_id": 1492915977,
    "original_position": 18,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493358857",
    "pull_request_review_id": 1886598516,
    "id": 1493358857,
    "node_id": "PRRC_kwDOABII585ZAtkJ",
    "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
    "path": "src/test/feefrac_tests.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think we should drop the `Assume()` calls, as otherwise I think we ought to do more to ensure that using operator- on FeeFrac's is safe everywhere that it might be invoked.",
    "created_at": "2024-02-17T15:42:48Z",
    "updated_at": "2024-02-17T15:43:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493358857",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493358857"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493358857"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493358857/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 1453502118,
    "original_position": 16,
    "position": 16,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493359169",
    "pull_request_review_id": 1886598977,
    "id": 1493359169,
    "node_id": "PRRC_kwDOABII585ZAtpB",
    "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) The Bitcoin Core developers",
    "path": "src/util/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: As the functions here don't relate to the `FeeFrac` implementation, perhaps this should be in a different file?  `feerate_diagram.cpp` maybe?",
    "created_at": "2024-02-17T15:44:22Z",
    "updated_at": "2024-02-17T20:59:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493359169",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493359169"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493359169"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493359169/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1,
    "original_line": 1,
    "side": "RIGHT",
    "original_position": 1,
    "position": 1,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493359700",
    "pull_request_review_id": 1886598977,
    "id": 1493359700,
    "node_id": "PRRC_kwDOABII585ZAtxU",
    "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <algorithm>\n+#include <array>\n+#include <vector>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();\n+    diagram.reserve(chunks.size() + 1);\n+    // Finish by sorting the chunks we calculated, and then accumulating them.\n+    std::sort(chunks.begin(), chunks.end(), [](const FeeFrac& a, const FeeFrac& b) { return a > b; });\n+\n+    // And now build the diagram for these chunks.\n+    diagram.emplace_back(0, 0);\n+    for (auto& chunk : chunks) {\n+        FeeFrac& last = diagram.back();\n+        diagram.emplace_back(last.fee+chunk.fee, last.size+chunk.size);\n+    }\n+}\n+\n+std::partial_ordering CompareFeerateDiagram(Span<const FeeFrac> dia0, Span<const FeeFrac> dia1)\n+{\n+    /** Array to allow indexed access to input diagrams. */\n+    const std::array<Span<const FeeFrac>, 2> dias = {dia0, dia1};\n+    /** How many elements we have processed in each input. */\n+    size_t next_index[2] = {1, 1};\n+    /** Whether the corresponding input is strictly better than the other at least in one place. */\n+    bool better_somewhere[2] = {false, false};\n+    /** Get the first unprocessed point in diagram number dia. */\n+    const auto next_point = [&](int dia) { return dias[dia][next_index[dia]]; };\n+    /** Get the last processed point in diagram number dia. */\n+    const auto prev_point = [&](int dia) { return dias[dia][next_index[dia] - 1]; };\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!dia0.empty() && !dia1.empty());\n+    Assert(prev_point(0).IsEmpty());\n+    Assert(prev_point(1).IsEmpty());\n+\n+    // Compare the overlapping area of the diagrams.\n+    while (next_index[0] < dias[0].size() && next_index[1] < dias[1].size()) {\n+        // Determine which diagram has the first unprocessed point.\n+        const int unproc_side = next_point(0).size > next_point(1).size;\n+\n+        // let `P` be the next point on diagram unproc_side, and `A` and `B` the previous and next points\n+        // on the other diagram. We want to know if P lies above or below the line AB. To determine this, we\n+        // compute the direction coefficients of line AB and of line AP, and compare them. These\n+        // direction coefficients are fee per size, and can thus be expressed as FeeFracs.",
    "path": "src/util/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: \"direction coefficient\" is not a term I'm familiar with (and from googling it doesn't seem like a super common term); perhaps it would be clearer to just use the word \"slope\" here?",
    "created_at": "2024-02-17T15:48:07Z",
    "updated_at": "2024-02-17T20:59:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493359700",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493359700"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493359700"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493359700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 50,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 51,
    "side": "RIGHT",
    "original_position": 51,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493390467",
    "pull_request_review_id": 1886598977,
    "id": 1493390467,
    "node_id": "PRRC_kwDOABII585ZA1SD",
    "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <span.h>\n+#include <util/check.h>\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    int64_t fee;\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t f, int32_t s) noexcept : fee{f}, size{s}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add fee and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Subtract fee and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    /** Compare two FeeFracs just by feerate. */\n+    friend inline std::weak_ordering FeeRateCompare(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly lower feerate than another. */\n+    friend inline bool operator<<(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a < cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly higher feerate than another. */\n+    friend inline bool operator>>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a > cross_b;\n+    }\n+\n+    /** Compare two FeeFracs. <, >, <=, and >= are auto-generated from this. */\n+    friend inline std::strong_ordering operator<=>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        if (cross_a == cross_b) return b.size <=> a.size;\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Swap two FeeFracs. */\n+    friend inline void swap(FeeFrac& a, FeeFrac& b) noexcept\n+    {\n+        std::swap(a.fee, b.fee);\n+        std::swap(a.size, b.size);\n+    }\n+};\n+\n+/** Takes the pre-computed chunks and generates a fee diagram which starts at FeeFrac of (0, 0) */\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram);\n+\n+/** Compares two feerate diagrams (which must both start at size=0). The shorter one is implicitly\n+ * extended with a horizontal straight line. */",
    "path": "src/util/feefrac.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Could add a comment here more precisely defining the preconditions for this function and what definition we are using for feerate diagram: specifically that a feerate diagram consists of a list of (fee, size) points with the property that size is strictly increasing and that the first entry is (0, 0).  (If these conditions are violated then the function can fail with an `Assume()` failure.)",
    "created_at": "2024-02-17T19:20:14Z",
    "updated_at": "2024-02-17T20:59:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493390467",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493390467"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493390467"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493390467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 159,
    "side": "RIGHT",
    "original_position": 159,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493391184",
    "pull_request_review_id": 1886598977,
    "id": 1493391184,
    "node_id": "PRRC_kwDOABII585ZA1dQ",
    "diff_hunk": "@@ -181,3 +183,24 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::pair<DiagramCheckError, std::string>> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                CAmount replacement_fees,\n+                                                int64_t replacement_vsize)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.",
    "path": "src/policy/rbf.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "802a104d0e2f810d97567e161e0cf61331052906",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: \"fee vs. size diagram\" -- maybe we should standardize the terminology to \"feerate diagram\"? I was also thinking about adding some documentation to doc/policy/mempool-replacements.md explaining what we're doing now.",
    "created_at": "2024-02-17T19:25:36Z",
    "updated_at": "2024-02-17T20:59:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493391184",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493391184"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493391184"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493391184/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 193,
    "side": "RIGHT",
    "original_position": 20,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493401259",
    "pull_request_review_id": 1886598977,
    "id": 1493401259,
    "node_id": "PRRC_kwDOABII585ZA36r",
    "diff_hunk": "@@ -733,6 +734,24 @@ class CTxMemPool\n         return m_sequence_number;\n     }\n \n+    /**\n+     * Calculate the old and new mempool feerate diagrams relating to the\n+     * clusters that would be affected by a potential replacement transaction.\n+     *\n+     * @param[in] replacement_fees    Package fees\n+     * @param[in] replacement_vsize   Package size\n+     * @param[in] direct_conflicts    All transactions that would be removed directly by\n+     *                                having a conflicting input with a proposed transaction\n+     * @param[in] all_conflicts       All transactions that would be removed\n+     * @param[out] old_diagram        The feerate diagram of the relevant clusters before accepting the new tx\n+     * @param[out] new_diagram        The feerate diagram of the relevant clusters after accepting the new tx\n+     * @return An optional error string if the conflicts don't match a calculable topology\n+     */\n+    std::optional<std::string> CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram) EXCLUSIVE_LOCKS_REQUIRED(cs);",
    "path": "src/txmempool.h",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "802a104d0e2f810d97567e161e0cf61331052906",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Maybe update the comment to be more explicit that this function only works for the situation where (replacement_fees, replacement_size) corresponds to a transaction package that has no in-mempool dependences.",
    "created_at": "2024-02-17T20:43:39Z",
    "updated_at": "2024-02-17T20:59:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493401259",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493401259"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493401259"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493401259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 757,
    "side": "RIGHT",
    "original_position": 25,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493417950",
    "pull_request_review_id": 1887031929,
    "id": 1493417950,
    "node_id": "PRRC_kwDOABII585ZA7_e",
    "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <algorithm>\n+#include <array>\n+#include <vector>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();\n+    diagram.reserve(chunks.size() + 1);\n+    // Finish by sorting the chunks we calculated, and then accumulating them.\n+    std::sort(chunks.begin(), chunks.end(), [](const FeeFrac& a, const FeeFrac& b) { return a > b; });\n+\n+    // And now build the diagram for these chunks.\n+    diagram.emplace_back(0, 0);\n+    for (auto& chunk : chunks) {\n+        FeeFrac& last = diagram.back();\n+        diagram.emplace_back(last.fee+chunk.fee, last.size+chunk.size);\n+    }\n+}\n+\n+std::partial_ordering CompareFeerateDiagram(Span<const FeeFrac> dia0, Span<const FeeFrac> dia1)\n+{\n+    /** Array to allow indexed access to input diagrams. */\n+    const std::array<Span<const FeeFrac>, 2> dias = {dia0, dia1};\n+    /** How many elements we have processed in each input. */\n+    size_t next_index[2] = {1, 1};\n+    /** Whether the corresponding input is strictly better than the other at least in one place. */\n+    bool better_somewhere[2] = {false, false};\n+    /** Get the first unprocessed point in diagram number dia. */\n+    const auto next_point = [&](int dia) { return dias[dia][next_index[dia]]; };\n+    /** Get the last processed point in diagram number dia. */\n+    const auto prev_point = [&](int dia) { return dias[dia][next_index[dia] - 1]; };\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!dia0.empty() && !dia1.empty());\n+    Assert(prev_point(0).IsEmpty());\n+    Assert(prev_point(1).IsEmpty());\n+\n+    // Compare the overlapping area of the diagrams.\n+    while (next_index[0] < dias[0].size() && next_index[1] < dias[1].size()) {\n+        // Determine which diagram has the first unprocessed point.\n+        const int unproc_side = next_point(0).size > next_point(1).size;\n+\n+        // let `P` be the next point on diagram unproc_side, and `A` and `B` the previous and next points\n+        // on the other diagram. We want to know if P lies above or below the line AB. To determine this, we\n+        // compute the direction coefficients of line AB and of line AP, and compare them. These\n+        // direction coefficients are fee per size, and can thus be expressed as FeeFracs.",
    "path": "src/util/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, I seem to have translated literally from Dutch. \"Slope\" is indeed the proper English translation.",
    "created_at": "2024-02-17T21:35:23Z",
    "updated_at": "2024-02-17T21:35:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493417950",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493417950"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493417950"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493417950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 50,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 1493359700,
    "original_position": 51,
    "position": null,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493469026",
    "pull_request_review_id": 1887045764,
    "id": 1493469026,
    "node_id": "PRRC_kwDOABII585ZBIdi",
    "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) The Bitcoin Core developers",
    "path": "src/util/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Curious to know the full meaning of `FeeFrac` is it Fee Fraction?\r\nMaybe Chunk will be a better name?",
    "created_at": "2024-02-17T23:22:50Z",
    "updated_at": "2024-02-22T18:07:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493469026",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493469026"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1493469026"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1493469026/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1,
    "original_line": 1,
    "side": "RIGHT",
    "in_reply_to_id": 1493359169,
    "original_position": 1,
    "position": 1,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495685692",
    "pull_request_review_id": 1890224651,
    "id": 1495685692,
    "node_id": "PRRC_kwDOABII585ZJlo8",
    "diff_hunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) The Bitcoin Core developers",
    "path": "src/util/feefrac.cpp",
    "commit_id": "72959867784098137a50c34f86deca8235eef4f8",
    "original_commit_id": "d200d30431368c7637a3490509b9158844b69e0d",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, it means \"fee fraction\", though the name isn't perfect - it really represents any ratio where the numerator is an `int64_t` and the denominator is an `int32_t`, with a sort order that tie-breaks by putting larger denominators last.\r\n\r\nI don't think Chunk is a good name, as we're using that term for a subset of transactions. A `FeeFrac` is related, but represents the aggregate feerate of a chunk (or really of any set of transactions, or even the difference between the fees/sizes of two sets of transactions).",
    "created_at": "2024-02-20T11:46:52Z",
    "updated_at": "2024-02-20T11:46:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1495685692",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495685692"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1495685692"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1495685692/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1,
    "original_line": 1,
    "side": "RIGHT",
    "in_reply_to_id": 1493359169,
    "original_position": 1,
    "position": 1,
    "subject_type": "line"
  }
]